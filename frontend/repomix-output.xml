This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.env.example
.repomixignore
next.config.js
package.json
src/components/common/Button.tsx
src/components/common/ErrorBoundary.tsx
src/components/common/Layout.tsx
src/components/common/LoadingSpinner.tsx
src/components/common/Modal.tsx
src/components/lobby/CreateRoomModal.tsx
src/components/lobby/JoinRoomModal.tsx
src/components/room/ActionButtons.tsx
src/components/room/PlayerList.tsx
src/components/room/RoomChat.tsx
src/components/room/WaitingRoom.tsx
src/context/AuthContext.tsx
src/context/SocketContext.tsx
src/context/ThemeContext.tsx
src/hooks/index.ts
src/pages/_app.tsx
src/pages/_document.tsx
src/pages/auth/forgot-password.tsx
src/pages/auth/login.tsx
src/pages/auth/register.tsx
src/pages/index.tsx
src/pages/lobby.tsx
src/pages/room/[id].tsx
src/services/api.ts
src/services/audioService.ts
src/services/auth.ts
src/styles/globals.css
src/types/index.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.example">
# üê∫ WEREWOLF - Frontend Environment Variables

# =============================================================================
# API CONFIGURATION
# =============================================================================
# URL base da API do backend
NEXT_PUBLIC_API_URL=http://localhost:3001

# URL do WebSocket
NEXT_PUBLIC_WS_URL=ws://localhost:3001

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
# Ambiente da aplica√ß√£o
NODE_ENV=development

# URL base do site (para SEO e Open Graph)
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Nome da aplica√ß√£o
NEXT_PUBLIC_APP_NAME=Werewolf

# =============================================================================
# ERROR TRACKING (OPCIONAL)
# =============================================================================
# Sentry DSN para tracking de erros
NEXT_PUBLIC_SENTRY_DSN=

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Habilitar PWA (Progressive Web App)
NEXT_PUBLIC_ENABLE_PWA=false

# Habilitar Service Worker
NEXT_PUBLIC_ENABLE_SW=false

# Modo de debug para desenvolvimento
NEXT_PUBLIC_DEBUG=false

# =============================================================================
# SOCIAL & SEO
# =============================================================================
# Meta tags para redes sociais
NEXT_PUBLIC_FACEBOOK_APP_ID=

# =============================================================================
# GAME SETTINGS
# =============================================================================
# Configura√ß√µes do jogo que podem ser alteradas pelo frontend
NEXT_PUBLIC_MAX_USERNAME_LENGTH=20
NEXT_PUBLIC_MIN_USERNAME_LENGTH=3
NEXT_PUBLIC_MAX_ROOM_NAME_LENGTH=30

# =============================================================================
# AUDIO SETTINGS
# =============================================================================
# Configura√ß√µes de √°udio padr√£o
NEXT_PUBLIC_DEFAULT_MUSIC_VOLUME=0.3
NEXT_PUBLIC_DEFAULT_SFX_VOLUME=0.7
NEXT_PUBLIC_AUDIO_ENABLED_DEFAULT=true

# =============================================================================
# DEVELOPMENT ONLY
# =============================================================================
# Mostrar informa√ß√µes de debug no console
NEXT_PUBLIC_SHOW_DEBUG_INFO=true

# Credenciais de teste (apenas em desenvolvimento)
NEXT_PUBLIC_DEMO_EMAIL=demo@werewolf.com
NEXT_PUBLIC_DEMO_PASSWORD=demo123

# =============================================================================
# EXTERNAL SERVICES (FUTURO)
# =============================================================================
# CDN para assets est√°ticos
NEXT_PUBLIC_CDN_URL=

# API de upload de imagens
NEXT_PUBLIC_UPLOAD_API_URL=

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================
# Timeout para reconex√£o do WebSocket (ms)
NEXT_PUBLIC_WS_RECONNECT_TIMEOUT=5000

# M√°ximo de tentativas de reconex√£o
NEXT_PUBLIC_WS_MAX_RECONNECT_ATTEMPTS=5

# Intervalo do heartbeat (ms)
NEXT_PUBLIC_WS_HEARTBEAT_INTERVAL=30000

# ‚úÖ ADICIONADO: Configura√ß√µes WebSocket espec√≠ficas do servidor
# Intervalo do heartbeat do servidor (ms)
WS_HEARTBEAT_INTERVAL=30000

# Timeout do ping (ms)
WS_PING_TIMEOUT=10000

# M√°ximo de tentativas de reconex√£o do servidor
WS_MAX_RECONNECT_ATTEMPTS=5

# =============================================================================
# UI CONFIGURATION
# =============================================================================
# Tema padr√£o (dark/light)
NEXT_PUBLIC_DEFAULT_THEME=dark

# Idioma padr√£o
NEXT_PUBLIC_DEFAULT_LOCALE=pt-BR

# Timezone padr√£o
NEXT_PUBLIC_DEFAULT_TIMEZONE=America/Sao_Paulo

# =============================================================================
# PERFORMANCE
# =============================================================================
# Tamanho m√°ximo de upload (em bytes)
NEXT_PUBLIC_MAX_UPLOAD_SIZE=5242880

# Cache TTL para requests da API (ms)
NEXT_PUBLIC_API_CACHE_TTL=300000

# =============================================================================
# SECURITY
# =============================================================================
# Dom√≠nios permitidos para CORS (separados por v√≠rgula)
NEXT_PUBLIC_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# Habilitar HTTPS em produ√ß√£o
NEXT_PUBLIC_FORCE_HTTPS=false
</file>

<file path=".repomixignore">
# üê∫ LOBISOMEM ONLINE - Repomix Ignore (Frontend)
# Arquivo para focar a an√°lise de IA no c√≥digo-fonte essencial.

# =============================================================================
# DEPEND√äNCIAS E PACOTES
# =============================================================================
node_modules/
package-lock.json
yarn.lock
pnpm-lock.yaml

# =============================================================================
# ARQUIVOS DE BUILD E CACHE DO NEXT.JS
# =============================================================================
.next/
out/
.vercel/

# =============================================================================
# AMBIENTE E SEGREDOS
# =============================================================================
.env
.env.local
.env.*.local
# Manter o .env.example para refer√™ncia de configura√ß√£o
!.env.example

# =============================================================================
# ARQUIVOS GERADOS E DE CONFIGURA√á√ÉO DE LINGUAGEM
# =============================================================================
# TypeScript
*.tsbuildinfo
next-env.d.ts
tsconfig.json # A configura√ß√£o do TS pode ser √∫til, mas vamos ignorar para focar no c√≥digo.

# =============================================================================
# CONFIGURA√á√ïES DE FERRAMENTAS (LINTING, FORMATTING, ETC.)
# =============================================================================
.eslintrc.json
.prettierrc
postcss.config.js
tailwind.config.js
next.config.js # Configura√ß√£o do Next.js, ignorar para focar no c√≥digo da aplica√ß√£o.
package.json # Ignorar para focar nos arquivos .ts/.tsx.

# =============================================================================
# LOGS E ARQUIVOS TEMPOR√ÅRIOS
# =============================================================================
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.cache/
tmp/
temp/

# =============================================================================
# HOOKS DE GIT E SCRIPTS
# =============================================================================
.husky/
quick-fix.bat

# =============================================================================
# DOCUMENTA√á√ÉO E ARQUIVOS META
# =============================================================================
README.md
LICENSE
.gitignore
.repomixignore # Ignorar o pr√≥prio arquivo.

# =============================================================================
# ARQUIVOS P√öBLICOS E ASSETS
# (Imagens, fontes, sons, etc. n√£o s√£o c√≥digo-fonte relevante para o bug)
# =============================================================================
public/
src/styles/ # O CSS global √© importante, mas para o bug de JS, podemos ignorar temporariamente.

# =============================================================================
# ARQUIVOS DE SA√çDA DO REPOMIX
# =============================================================================
repomix-output.xml
*.xml

# =============================================================================
# ARQUIVOS DE TESTE (se houver)
# =============================================================================
coverage/
*.test.ts
*.test.tsx
*.spec.ts
*.spec.tsx

# =============================================================================
# ARQUIVOS DE EDITOR E SISTEMA OPERACIONAL
# =============================================================================
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,

  // ‚úÖ EXPERIMENTAL: Configura√ß√µes experimentais do Next.js
  experimental: {
    // Enable SWC for better performance
    forceSwcTransforms: true,
  },

  // ‚úÖ ADICIONADO: Configura√ß√£o de locale para formata√ß√£o consistente
  i18n: {
    locales: ['pt-BR'],
    defaultLocale: 'pt-BR',
  },

  // ‚úÖ ADICIONADO: Configura√ß√£o para desenvolvimento com WebSocket
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:3001/api/:path*',
      },
    ];
  },

  // ‚úÖ MELHORADO: Headers para WebSocket e seguran√ßa
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          // Security headers
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          // ‚úÖ ADICIONADO: Permitir conex√µes WebSocket
          {
            key: 'Access-Control-Allow-Origin',
            value: '*',
          },
          {
            key: 'Access-Control-Allow-Methods',
            value: 'GET, POST, PUT, DELETE, OPTIONS',
          },
          {
            key: 'Access-Control-Allow-Headers',
            value: 'Content-Type, Authorization',
          },
        ],
      },
    ];
  },

  // ‚úÖ ATUALIZADO: Configura√ß√£o de vari√°veis de ambiente
  env: {
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001',
    NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001',
  },

  // Image optimization
  images: {
    domains: ['localhost'],
    formats: ['image/webp', 'image/avif'],
  },

  // ‚úÖ MELHORADO: Webpack configuration
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Audio files support
    config.module.rules.push({
      test: /\.(mp3|wav|ogg)$/,
      use: {
        loader: 'file-loader',
        options: {
          publicPath: '/_next/static/audio/',
          outputPath: 'static/audio/',
        },
      },
    });

    return config;
  },

  // ‚úÖ ADICIONADO: Redirects √∫teis
  async redirects() {
    return [
      {
        source: '/game',
        destination: '/lobby',
        permanent: false,
      },
    ];
  },
};

module.exports = nextConfig;
</file>

<file path="package.json">
{
  "name": "werewolf-frontend",
  "version": "1.0.0",
  "description": "üê∫ Werewolf - Frontend Next.js para jogo de dedu√ß√£o social",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write ."
  },
  "dependencies": {
    "next": "^14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "typescript": "^5.3.3",
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "tailwindcss": "^3.3.6",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "clsx": "^2.0.0",
    "lucide-react": "^0.303.0",
    "framer-motion": "^10.16.16",
    "axios": "^1.6.2",
    "js-cookie": "^3.0.5",
    "@types/js-cookie": "^3.0.6",
    "react-hook-form": "^7.48.2",
    "@hookform/resolvers": "^3.3.2",
    "zod": "^3.22.4",
    "react-hot-toast": "^2.4.1",
    "howler": "^2.2.4",
    "@types/howler": "^2.2.11"
  },
  "devDependencies": {
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.0.4",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.2",
    "prettier": "^3.1.1"
  }
}
</file>

<file path="src/components/common/Button.tsx">
'use client';

import { forwardRef } from 'react';
import { clsx } from 'clsx';
import { useTheme } from '@/context/ThemeContext';
import { ButtonProps } from '@/types';

// =============================================================================
// LOADING SPINNER COMPONENT (Inline para evitar depend√™ncias)
// =============================================================================
const Spinner = ({ className }: { className?: string }) => (
  <svg
    className={clsx('animate-spin', className)}
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    />
  </svg>
);

// =============================================================================
// BUTTON COMPONENT
// =============================================================================
const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  function Button(
    {
      children,
      variant = 'primary',
      size = 'md',
      disabled = false,
      loading = false,
      onClick,
      className = '',
      type = 'button',
      ...props
    },
    ref
  ) {
    // Safe theme hook usage with fallback
    let playSound: (soundId: string) => void;
    try {
      const theme = useTheme();
      playSound = theme?.playSound || (() => { });
    } catch (error) {
      console.warn('Theme context not available, using fallback');
      playSound = () => { };
    }

    // =============================================================================
    // VARIANT STYLES
    // =============================================================================
    const variantStyles = {
      primary: clsx(
        'bg-gradient-to-b from-blue-500 to-blue-700',
        'hover:from-blue-400 hover:to-blue-600',
        'text-white font-bold shadow-lg',
        'border-2 border-blue-400',
        'hover:shadow-xl',
        'active:from-blue-700 active:to-blue-900'
      ),

      secondary: clsx(
        'bg-gradient-to-b from-gray-600 to-gray-800',
        'hover:from-gray-500 hover:to-gray-700',
        'text-white font-semibold shadow-lg',
        'border-2 border-gray-400',
        'hover:shadow-xl'
      ),

      danger: clsx(
        'bg-gradient-to-b from-red-500 to-red-700',
        'hover:from-red-400 hover:to-red-600',
        'text-white font-bold shadow-lg',
        'border-2 border-red-300',
        'hover:shadow-xl',
        'active:from-red-700 active:to-red-900'
      ),

      medieval: clsx(
        'bg-gradient-to-b from-amber-600 to-amber-800',
        'hover:from-amber-500 hover:to-amber-700',
        'text-white font-bold text-lg shadow-lg',
        'border-3 border-amber-400',
        'hover:shadow-xl',
        'relative overflow-hidden'
      ),

      ghost: clsx(
        'bg-transparent hover:bg-white/10',
        'text-white hover:text-blue-300',
        'border border-white/30 hover:border-blue-300',
        'transition-all duration-200'
      ),

      werewolf: clsx(
        'bg-gradient-to-b from-red-800 to-red-900',
        'hover:from-red-700 hover:to-red-800',
        'text-white font-bold shadow-lg',
        'border-2 border-red-600',
        'hover:shadow-xl'
      ),

      town: clsx(
        'bg-gradient-to-b from-green-600 to-green-800',
        'hover:from-green-500 hover:to-green-700',
        'text-white font-bold shadow-lg',
        'border-2 border-green-400',
        'hover:shadow-xl'
      ),
    };

    // =============================================================================
    // SIZE STYLES
    // =============================================================================
    const sizeStyles = {
      sm: 'px-3 py-1.5 text-sm rounded-md gap-1.5',
      md: 'px-4 py-2 text-base rounded-lg gap-2',
      lg: 'px-6 py-3 text-lg rounded-xl gap-2.5',
      xl: 'px-8 py-4 text-xl rounded-xl gap-3',
    };

    // =============================================================================
    // DISABLED/LOADING STYLES
    // =============================================================================
    const disabledStyles = clsx(
      'opacity-50 cursor-not-allowed',
      'hover:shadow-none hover:transform-none',
      'pointer-events-none'
    );

    // =============================================================================
    // COMBINED CLASSES
    // =============================================================================
    const buttonClasses = clsx(
      // Base styles
      'relative inline-flex items-center justify-center',
      'font-medium transition-all duration-200',
      'transform hover:scale-105 hover:-translate-y-0.5',
      'active:scale-95 active:translate-y-0',
      'focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2',
      'select-none',

      // Variant styles
      variantStyles[variant],

      // Size styles
      sizeStyles[size],

      // State styles
      (disabled || loading) && disabledStyles,

      // Custom className
      className
    );

    // =============================================================================
    // CLICK HANDLER COM SOM
    // =============================================================================
    const handleClick = () => {
      if (disabled || loading) return;

      // Escolher som baseado no tipo de bot√£o
      let soundType = 'button_click'; // default (click3.wav)

      if (variant === 'ghost' || variant === 'secondary') {
        soundType = 'button_secondary'; // click1.wav (som leve)
      } else if (variant === 'medieval' || variant === 'primary' || variant === 'danger') {
        soundType = 'button_click'; // click3.wav (som firme)
      }

      playSound(soundType);

      // Call onClick if provided
      onClick?.();
    };

    // =============================================================================
    // RENDER
    // =============================================================================
    return (
      <button
        ref={ref}
        type={type}
        className={buttonClasses}
        onClick={handleClick}
        disabled={disabled || loading}
        {...props}
      >
        {/* Loading spinner */}
        {loading && (
          <Spinner className="w-4 h-4" />
        )}

        {/* Button content */}
        {children}

        {/* Medieval button enhancement */}
        {variant === 'medieval' && (
          <>
            {/* Top highlight */}
            <div className="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-amber-200 to-transparent opacity-60" />

            {/* Side highlights */}
            <div className="absolute top-0 bottom-0 left-0 w-1 bg-gradient-to-b from-amber-200 via-transparent to-amber-200 opacity-40" />
            <div className="absolute top-0 bottom-0 right-0 w-1 bg-gradient-to-b from-amber-200 via-transparent to-amber-200 opacity-40" />
          </>
        )}

        {/* Glow effect for primary variants */}
        {(variant === 'primary' || variant === 'medieval') && !disabled && !loading && (
          <div className="absolute -inset-0.5 bg-gradient-to-r from-blue-400 to-amber-400 rounded-lg opacity-0 group-hover:opacity-20 blur transition-opacity duration-300 -z-10" />
        )}
      </button>
    );
  }
);

// =============================================================================
// DISPLAY NAME (CR√çTICO para forwardRef)
// =============================================================================
Button.displayName = 'Button';

// =============================================================================
// BUTTON GROUP COMPONENT
// =============================================================================
interface ButtonGroupProps {
  children: React.ReactNode;
  className?: string;
  orientation?: 'horizontal' | 'vertical';
}

export const ButtonGroup = forwardRef<HTMLDivElement, ButtonGroupProps>(
  function ButtonGroup(
    {
      children,
      className = '',
      orientation = 'horizontal'
    },
    ref
  ) {
    return (
      <div
        ref={ref}
        className={clsx(
          'inline-flex',
          orientation === 'horizontal' ? 'flex-row' : 'flex-col',
          '[&>button]:rounded-none',
          '[&>button:first-child]:rounded-l-lg',
          '[&>button:last-child]:rounded-r-lg',
          orientation === 'vertical' && '[&>button:first-child]:rounded-t-lg [&>button:first-child]:rounded-l-none',
          orientation === 'vertical' && '[&>button:last-child]:rounded-b-lg [&>button:last-child]:rounded-r-none',
          '[&>button:not(:first-child)]:border-l-0',
          orientation === 'vertical' && '[&>button:not(:first-child)]:border-l [&>button:not(:first-child)]:border-t-0',
          className
        )}
      >
        {children}
      </div>
    );
  }
);

ButtonGroup.displayName = 'ButtonGroup';

// =============================================================================
// ICON BUTTON COMPONENT
// =============================================================================
interface IconButtonProps extends Omit<ButtonProps, 'children'> {
  icon: React.ReactNode;
  'aria-label': string;
}

export const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(
  function IconButton(
    {
      icon,
      className = '',
      size = 'md',
      ...props
    },
    ref
  ) {
    const iconSizes = {
      sm: 'w-4 h-4',
      md: 'w-5 h-5',
      lg: 'w-6 h-6',
      xl: 'w-8 h-8',
    };

    return (
      <Button
        ref={ref}
        className={clsx('!p-2 aspect-square', className)}
        size={size}
        {...props}
      >
        <span className={iconSizes[size]}>{icon}</span>
      </Button>
    );
  }
);

IconButton.displayName = 'IconButton';

// =============================================================================
// DEFAULT EXPORT
// =============================================================================
export default Button;
</file>

<file path="src/components/common/ErrorBoundary.tsx">
'use client';

import React, { Component, ReactNode } from 'react';
import { motion } from 'framer-motion';
import { RefreshCw, Home, AlertTriangle } from 'lucide-react';
import Button from './Button';

// =============================================================================
// ERROR BOUNDARY TYPES
// =============================================================================
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
  errorInfo: React.ErrorInfo | null;
}

interface ErrorBoundaryProps {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

// =============================================================================
// ERROR BOUNDARY CLASS COMPONENT
// =============================================================================
export default class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
    };
  }

  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    return {
      hasError: true,
      error,
    };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    this.setState({
      error,
      errorInfo,
    });

    // Log error to console in development
    if (process.env.NODE_ENV === 'development') {
      console.error('Error caught by ErrorBoundary:', error);
      console.error('Error info:', errorInfo);
    }

    // Call onError prop if provided
    this.props.onError?.(error, errorInfo);

    // In production, you might want to send this to an error reporting service
    // Example: Sentry, LogRocket, etc.
  }

  handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
    });
  };

  handleGoHome = () => {
    window.location.href = '/';
  };

  render() {
    if (this.state.hasError) {
      // Use custom fallback if provided
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // Default error UI
      return <DefaultErrorUI
        error={this.state.error}
        onRetry={this.handleRetry}
        onGoHome={this.handleGoHome}
      />;
    }

    return this.props.children;
  }
}

// =============================================================================
// DEFAULT ERROR UI
// =============================================================================
interface DefaultErrorUIProps {
  error: Error | null;
  onRetry: () => void;
  onGoHome: () => void;
}

function DefaultErrorUI({ error, onRetry, onGoHome }: DefaultErrorUIProps) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-medieval-900 to-red-950 flex items-center justify-center p-6">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        className="max-w-md w-full text-center"
      >
        {/* Error icon */}
        <motion.div
          animate={{
            scale: [1, 1.1, 1],
            rotate: [0, 5, -5, 0]
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: 'easeInOut'
          }}
          className="text-8xl mb-6"
        >
          üíÄ
        </motion.div>

        {/* Title */}
        <h1 className="text-3xl font-medieval text-red-300 mb-4 text-glow">
          Algo deu errado!
        </h1>

        {/* Description */}
        <p className="text-white/70 mb-6 leading-relaxed">
          A vila foi atacada por um erro inesperado.
          N√£o se preocupe, podemos tentar novamente.
        </p>

        {/* Error message in development */}
        {process.env.NODE_ENV === 'development' && error && (
          <div className="bg-black/30 border border-red-500/30 rounded-lg p-4 mb-6 text-left">
            <div className="flex items-center mb-2">
              <AlertTriangle className="w-4 h-4 text-red-400 mr-2" />
              <span className="text-red-400 font-semibold text-sm">
                Erro de Desenvolvimento
              </span>
            </div>
            <pre className="text-red-300 text-xs overflow-auto max-h-32">
              {error.message}
            </pre>
          </div>
        )}

        {/* Action buttons */}
        <div className="space-y-3">
          <Button
            variant="medieval"
            size="lg"
            onClick={onRetry}
            className="w-full"
          >
            <RefreshCw className="w-5 h-5 mr-2" />
            Tentar Novamente
          </Button>

          <Button
            variant="ghost"
            size="lg"
            onClick={onGoHome}
            className="w-full"
          >
            <Home className="w-5 h-5 mr-2" />
            Voltar ao In√≠cio
          </Button>
        </div>

        {/* Footer */}
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
          className="text-white/40 text-sm mt-8"
        >
          Se o problema persistir, recarregue a p√°gina
        </motion.p>
      </motion.div>
    </div>
  );
}

// =============================================================================
// HOOK FOR FUNCTIONAL COMPONENTS
// =============================================================================
export function useErrorHandler() {
  const [error, setError] = React.useState<Error | null>(null);

  const resetError = React.useCallback(() => {
    setError(null);
  }, []);

  const captureError = React.useCallback((error: Error) => {
    setError(error);
    console.error('Error captured:', error);
  }, []);

  // Throw error to be caught by ErrorBoundary
  React.useEffect(() => {
    if (error) {
      throw error;
    }
  }, [error]);

  return { captureError, resetError };
}

// =============================================================================
// SPECIFIC ERROR COMPONENTS
// =============================================================================

// Network Error
export function NetworkError({ onRetry }: { onRetry: () => void }) {
  return (
    <div className="text-center p-8">
      <div className="text-6xl mb-4">üì°</div>
      <h3 className="text-xl font-bold text-white mb-2">
        Erro de Conex√£o
      </h3>
      <p className="text-white/70 mb-6">
        N√£o foi poss√≠vel conectar com o servidor.
        Verifique sua internet e tente novamente.
      </p>
      <Button variant="primary" onClick={onRetry}>
        <RefreshCw className="w-4 h-4 mr-2" />
        Tentar Novamente
      </Button>
    </div>
  );
}

// Game Error
export function GameError({
  message,
  onRetry,
  onLeave
}: {
  message: string;
  onRetry?: () => void;
  onLeave?: () => void;
}) {
  return (
    <div className="text-center p-8">
      <div className="text-6xl mb-4">üéÆ</div>
      <h3 className="text-xl font-bold text-white mb-2">
        Erro no Jogo
      </h3>
      <p className="text-white/70 mb-6">
        {message}
      </p>
      <div className="space-y-3">
        {onRetry && (
          <Button variant="primary" onClick={onRetry} className="w-full">
            <RefreshCw className="w-4 h-4 mr-2" />
            Tentar Novamente
          </Button>
        )}
        {onLeave && (
          <Button variant="ghost" onClick={onLeave} className="w-full">
            <Home className="w-4 h-4 mr-2" />
            Sair do Jogo
          </Button>
        )}
      </div>
    </div>
  );
}

// 404 Error
export function NotFoundError() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-medieval-900 to-medieval-800 flex items-center justify-center p-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center max-w-md"
      >
        <div className="text-8xl mb-6">üèöÔ∏è</div>
        <h1 className="text-4xl font-medieval text-white mb-4">
          404
        </h1>
        <h2 className="text-xl text-white/80 mb-6">
          Esta p√°gina foi devorada pelos lobos
        </h2>
        <p className="text-white/60 mb-8">
          A p√°gina que voc√™ procura n√£o existe ou foi movida para outro local.
        </p>
        <Button
          variant="medieval"
          size="lg"
          onClick={() => window.location.href = '/'}
        >
          <Home className="w-5 h-5 mr-2" />
          Voltar √† Vila
        </Button>
      </motion.div>
    </div>
  );
}
</file>

<file path="src/components/common/Layout.tsx">
'use client';

import { ReactNode, useState } from 'react';
import { motion } from 'framer-motion';
import {
  Home,
  User,
  Trophy,
  Settings,
  LogOut,
  Volume2,
  VolumeX,
  Moon,
  Sun,
  Menu,
  X
} from 'lucide-react';
import { clsx } from 'clsx';
import { useAuth } from '@/context/AuthContext';
import { useTheme } from '@/context/ThemeContext';
import { useSocket } from '@/context/SocketContext';
import Button from './Button';
import { useRouter } from 'next/navigation';

// =============================================================================
// LAYOUT PROPS
// =============================================================================
interface LayoutProps {
  children: ReactNode;
  showHeader?: boolean;
  showSidebar?: boolean;
  showFooter?: boolean;
  className?: string;
  variant?: 'default' | 'game' | 'auth' | 'landing';
}

// =============================================================================
// MAIN LAYOUT COMPONENT
// =============================================================================
export default function Layout({
  children,
  showHeader = true,
  showSidebar = true,
  showFooter = true,
  className = '',
  variant = 'default',
}: LayoutProps) {
  const { getThemeClass, getPhaseColors } = useTheme();
  const phaseColors = getPhaseColors();

  // Variant-specific layouts
  if (variant === 'auth') {
    return <AuthLayout>{children}</AuthLayout>;
  }

  if (variant === 'landing') {
    return <LandingLayout>{children}</LandingLayout>;
  }

  if (variant === 'game') {
    return <GameLayout>{children}</GameLayout>;
  }

  // Default layout
  return (
    <div className={clsx(
      'min-h-screen',
      `bg-gradient-to-br ${phaseColors.background}`,
      getThemeClass(),
      className
    )}>
      {showHeader && <Header />}

      <div className="flex">
        {showSidebar && <Sidebar />}

        <main className={clsx(
          'flex-1 transition-all duration-300',
          showSidebar ? 'ml-64' : 'ml-0',
          showHeader ? 'pt-16' : 'pt-0',
          'p-6'
        )}>
          {children}
        </main>
      </div>

      {showFooter && <Footer />}
    </div>
  );
}

// =============================================================================
// HEADER COMPONENT
// =============================================================================
function Header() {
  const { user, logout } = useAuth();
  const { isDark, toggleDarkMode, audioConfig, updateAudioConfig } = useTheme();
  const { status } = useSocket();
  const [showUserMenu, setShowUserMenu] = useState(false);

  const toggleAudio = () => {
    updateAudioConfig({ enabled: !audioConfig.enabled });
  };

  return (
    <motion.header
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      className="fixed top-0 left-0 right-0 z-40 bg-medieval-900/95 backdrop-blur-sm border-b border-medieval-600"
    >
      <div className="flex items-center justify-between h-16 px-6">
        {/* Logo */}
        <div className="flex items-center space-x-3">
          <div className="text-2xl">üê∫</div>
          <h1 className="text-xl font-medieval text-glow">
            Werewolf
          </h1>

          {/* Connection status */}
          <div className={clsx(
            'w-2 h-2 rounded-full',
            status === 'connected' ? 'bg-green-400' : 'bg-red-400'
          )} />
        </div>

        {/* Controls */}
        <div className="flex items-center space-x-3">
          {/* Audio toggle */}
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleAudio}
            aria-label={audioConfig.enabled ? 'Desativar som' : 'Ativar som'}
          >
            {audioConfig.enabled ?
              <Volume2 className="w-5 h-5" /> :
              <VolumeX className="w-5 h-5" />
            }
          </Button>

          {/* Theme toggle */}
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleDarkMode}
            aria-label={isDark ? 'Tema claro' : 'Tema escuro'}
          >
            {isDark ?
              <Sun className="w-5 h-5" /> :
              <Moon className="w-5 h-5" />
            }
          </Button>

          {/* User menu */}
          {user && (
            <div className="relative">
              <Button
                variant="ghost"
                onClick={() => setShowUserMenu(!showUserMenu)}
                className="flex items-center space-x-2"
              >
                <div className="w-8 h-8 bg-salem-600 rounded-full flex items-center justify-center">
                  {user.avatar ? (
                    <img src={user.avatar} alt="" className="w-full h-full rounded-full" />
                  ) : (
                    <span className="text-sm font-bold">
                      {user.username.charAt(0).toUpperCase()}
                    </span>
                  )}
                </div>
                <span className="font-medium">{user.username}</span>
              </Button>

              {/* Dropdown menu */}
              {showUserMenu && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="absolute right-0 mt-2 w-48 bg-medieval-800 rounded-lg shadow-medieval border border-medieval-600"
                >
                  <div className="py-2">
                    <div className="px-4 py-2 border-b border-medieval-600">
                      <p className="text-sm text-white/70">N√≠vel {user.level}</p>
                      <p className="text-xs text-white/50">{user.totalGames} jogos</p>
                    </div>

                    <Button
                      variant="ghost"
                      className="w-full justify-start px-4 py-2 text-left"
                      onClick={() => setShowUserMenu(false)}
                    >
                      <User className="w-4 h-4 mr-2" />
                      Perfil
                    </Button>

                    <Button
                      variant="ghost"
                      className="w-full justify-start px-4 py-2 text-left"
                      onClick={() => setShowUserMenu(false)}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Configura√ß√µes
                    </Button>

                    <div className="border-t border-medieval-600 mt-2 pt-2">
                      <Button
                        variant="ghost"
                        className="w-full justify-start px-4 py-2 text-left text-red-400 hover:text-red-300"
                        onClick={() => {
                          setShowUserMenu(false);
                          logout();
                        }}
                      >
                        <LogOut className="w-4 h-4 mr-2" />
                        Sair
                      </Button>
                    </div>
                  </div>
                </motion.div>
              )}
            </div>
          )}
        </div>
      </div>
    </motion.header>
  );
}

// =============================================================================
// SIDEBAR COMPONENT
// =============================================================================
function Sidebar() {
  const router = useRouter();
  const [isCollapsed, setIsCollapsed] = useState(false);

  const menuItems = [
    { icon: Home, label: 'Lobby', href: '/lobby' },
    { icon: User, label: 'Perfil', href: '/profile' },
    { icon: Trophy, label: 'Ranking', href: '/leaderboard' },
    { icon: Settings, label: 'Configura√ß√µes', href: '/settings' },
  ];

  return (
    <motion.aside
      initial={{ x: -300 }}
      animate={{ x: 0 }}
      className={clsx(
        'fixed left-0 top-16 bottom-0 z-30',
        'bg-medieval-900/95 backdrop-blur-sm border-r border-medieval-600',
        'transition-all duration-300',
        isCollapsed ? 'w-16' : 'w-64'
      )}
    >
      {/* Toggle button */}
      <div className="p-4 border-b border-medieval-600">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setIsCollapsed(!isCollapsed)}
          className="w-full justify-center"
        >
          {isCollapsed ? <Menu className="w-5 h-5" /> : <X className="w-5 h-5" />}
        </Button>
      </div>

      {/* Navigation */}
      <nav className="p-4 space-y-2">
        {menuItems.map((item) => (
          <Button
            key={item.href}
            variant="ghost"
            className={clsx(
              'w-full justify-start',
              isCollapsed ? 'px-2' : 'px-4'
            )}
            onClick={() => router.push(item.href)}
          >
            <item.icon className="w-5 h-5" />
            {!isCollapsed && <span className="ml-3">{item.label}</span>}
          </Button>
        ))}
      </nav>
    </motion.aside>
  );
}

// =============================================================================
// FOOTER COMPONENT
// =============================================================================
function Footer() {
  return (
    <footer className="bg-medieval-900/80 border-t border-medieval-600 py-4 px-6 mt-auto relative z-10">
      <div className="flex items-center justify-between text-sm text-white/70">
        <p>¬© 2025 Werewolf. Todos os direitos reservados.</p>
        <p>Vers√£o 1.0.0</p>
      </div>
    </footer>
  );
}

// =============================================================================
// AUTH LAYOUT
// =============================================================================
function AuthLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-medieval-900 via-medieval-800 to-night-dark flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <div className="text-6xl mb-4">üê∫</div>
          <h1 className="text-3xl font-medieval text-glow">
            Werewolf
          </h1>
          <p className="text-white/70 mt-2">
            Entre na vila... se tiver coragem
          </p>
        </motion.div>

        {/* Content */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          {children}
        </motion.div>
      </div>
    </div>
  );
}

// =============================================================================
// LANDING LAYOUT
// =============================================================================
function LandingLayout({ children }: { children: ReactNode }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-medieval-900 via-medieval-800 to-night-dark">
      {children}
    </div>
  );
}

// =============================================================================
// GAME LAYOUT
// =============================================================================
function GameLayout({ children }: { children: ReactNode }) {
  const { currentPhase, getPhaseColors } = useTheme();
  const phaseColors = getPhaseColors();

  return (
    <div className={clsx(
      'min-h-screen transition-all duration-1000',
      `bg-gradient-to-br ${phaseColors.background}`
    )}>
      {/* Game header */}
      <div className="bg-black/20 border-b border-white/10 px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="text-2xl">üê∫</div>
            <div>
              <h1 className="font-medieval text-xl text-glow">
                Werewolf
              </h1>
              <p className={clsx('text-sm', phaseColors.text)}>
                Fase: {currentPhase}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Game content */}
      <div className="relative">
        {children}
      </div>
    </div>
  );
}
</file>

<file path="src/components/common/LoadingSpinner.tsx">
'use client';

import { motion } from 'framer-motion';
import { clsx } from 'clsx';

// =============================================================================
// LOADING SPINNER COMPONENT
// =============================================================================
interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'default' | 'medieval' | 'werewolf' | 'dots';
  className?: string;
  text?: string;
}

function LoadingSpinner({
  size = 'md',
  variant = 'default',
  className = '',
  text,
}: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
    xl: 'w-16 h-16',
  };

  if (variant === 'medieval') {
    return <MedievalSpinner size={size} className={className} text={text} />;
  }

  if (variant === 'werewolf') {
    return <WerewolfSpinner size={size} className={className} text={text} />;
  }

  if (variant === 'dots') {
    return <DotsSpinner size={size} className={className} text={text} />;
  }

  // Default spinner
  return (
    <div className={clsx('flex flex-col items-center justify-center', className)}>
      <motion.div
        className={clsx(
          sizeClasses[size],
          'border-3 border-salem-600 border-t-transparent rounded-full'
        )}
        animate={{ rotate: 360 }}
        transition={{
          duration: 1,
          repeat: Infinity,
          ease: 'linear',
        }}
      />
      {text && (
        <p className="mt-3 text-white/70 font-medium animate-pulse">
          {text}
        </p>
      )}
    </div>
  );
}

// =============================================================================
// MEDIEVAL SPINNER
// =============================================================================
function MedievalSpinner({
  size,
  className,
  text
}: Pick<LoadingSpinnerProps, 'size' | 'className' | 'text'>) {
  const iconSizes = {
    sm: 'text-2xl',
    md: 'text-4xl',
    lg: 'text-6xl',
    xl: 'text-8xl',
  };

  return (
    <div className={clsx('flex flex-col items-center justify-center', className)}>
      <motion.div
        className={clsx('text-amber-400', iconSizes[size!])}
        animate={{
          rotate: 360,
          scale: [1, 1.1, 1],
        }}
        transition={{
          rotate: {
            duration: 2,
            repeat: Infinity,
            ease: 'linear',
          },
          scale: {
            duration: 1,
            repeat: Infinity,
            ease: 'easeInOut',
          },
        }}
      >
        ‚öîÔ∏è
      </motion.div>
      {text && (
        <p className="mt-3 text-amber-300 font-medieval animate-pulse">
          {text}
        </p>
      )}
    </div>
  );
}

// =============================================================================
// WEREWOLF SPINNER
// =============================================================================
function WerewolfSpinner({
  size,
  className,
  text
}: Pick<LoadingSpinnerProps, 'size' | 'className' | 'text'>) {
  const iconSizes = {
    sm: 'text-2xl',
    md: 'text-4xl',
    lg: 'text-6xl',
    xl: 'text-8xl',
  };

  return (
    <div className={clsx('flex flex-col items-center justify-center', className)}>
      <motion.div
        className={clsx('text-red-400', iconSizes[size!])}
        animate={{
          scale: [1, 1.3, 1],
          rotate: [0, 5, -5, 0],
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: 'easeInOut',
        }}
      >
        üê∫
      </motion.div>
      {text && (
        <p className="mt-3 text-red-300 font-bold animate-pulse">
          {text}
        </p>
      )}
    </div>
  );
}

// =============================================================================
// DOTS SPINNER
// =============================================================================
function DotsSpinner({
  size,
  className,
  text
}: Pick<LoadingSpinnerProps, 'size' | 'className' | 'text'>) {
  const dotSizes = {
    sm: 'w-2 h-2',
    md: 'w-3 h-3',
    lg: 'w-4 h-4',
    xl: 'w-6 h-6',
  };

  const dotSpacing = {
    sm: 'space-x-1',
    md: 'space-x-2',
    lg: 'space-x-3',
    xl: 'space-x-4',
  };

  return (
    <div className={clsx('flex flex-col items-center justify-center', className)}>
      <div className={clsx('flex', dotSpacing[size!])}>
        {[0, 1, 2].map((index) => (
          <motion.div
            key={index}
            className={clsx(
              dotSizes[size!],
              'bg-salem-400 rounded-full'
            )}
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.5, 1, 0.5],
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              delay: index * 0.2,
              ease: 'easeInOut',
            }}
          />
        ))}
      </div>
      {text && (
        <p className="mt-3 text-white/70 font-medium animate-pulse">
          {text}
        </p>
      )}
    </div>
  );
}

// =============================================================================
// FULLSCREEN LOADING
// =============================================================================
interface FullscreenLoadingProps {
  variant?: LoadingSpinnerProps['variant'];
  message?: string;
  submessage?: string;
}

export function FullscreenLoading({
  variant = 'medieval',
  message = 'Carregando...',
  submessage,
}: FullscreenLoadingProps) {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="fixed inset-0 z-50 flex items-center justify-center bg-medieval-900/95 backdrop-blur-sm"
    >
      <div className="text-center">
        <LoadingSpinner
          variant={variant}
          size="xl"
          text={message}
        />
        {submessage && (
          <motion.p
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="mt-4 text-white/50 text-sm"
          >
            {submessage}
          </motion.p>
        )}
      </div>
    </motion.div>
  );
}

// =============================================================================
// PAGE LOADING
// =============================================================================
export function PageLoading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-medieval-900">
      <div className="text-center">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="text-8xl mb-8"
        >
          üê∫
        </motion.div>

        <motion.h1
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="text-3xl font-medieval text-glow mb-4"
        >
          Lobisomem Online
        </motion.h1>

        <LoadingSpinner
          variant="medieval"
          size="lg"
          text="Preparando a vila..."
        />
      </div>
    </div>
  );
}

// =============================================================================
// ‚úÖ EXPORTS CORRETOS - ADICIONADOS NO FINAL
// =============================================================================
export default LoadingSpinner;
</file>

<file path="src/components/common/Modal.tsx">
'use client';

import { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { clsx } from 'clsx';
import { useTheme } from '@/context/ThemeContext';
import { ModalProps } from '@/types';
import Button from './Button';

// =============================================================================
// MODAL COMPONENT (VERS√ÉO FINAL CORRIGIDA E FUNCIONAL)
// =============================================================================
export default function Modal({
  isOpen,
  onClose,
  title,
  children,
  className = '',
  closeOnOverlayClick = true,
  size = 'md',
  variant = 'default',
}: ModalProps & {
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  variant?: 'default' | 'medieval' | 'game' | 'error';
}) {
  const [mounted, setMounted] = useState(false);

  // Garante que o c√≥digo s√≥ rode no cliente para o createPortal
  useEffect(() => {
    setMounted(true);
    return () => setMounted(false);
  }, []);

  // Suporte para fechar com a tecla ESC
  useEffect(() => {
    if (!isOpen) return;
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [isOpen, onClose]);

  // Bloqueio de scroll do body quando o modal est√° aberto
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  // Render guard para SSR
  if (!mounted) return null;

  // Configura√ß√µes de estilo
  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
    full: 'w-[95vw] h-[95vh]',
  };

  const variantStyles = {
    default: 'bg-medieval-800 border-medieval-600 text-white shadow-medieval',
    medieval: 'bg-gradient-to-b from-medieval-700 to-medieval-900 border-3 border-amber-600 text-white shadow-glow-gold relative overflow-hidden',
    game: 'bg-gradient-to-b from-night-light to-night-dark border-2 border-salem-500 text-white shadow-2xl backdrop-blur-sm',
    error: 'bg-gradient-to-b from-red-900 to-red-950 border-2 border-red-500 text-white shadow-glow-red',
  };

  // Configura√ß√µes de anima√ß√£o
  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
    exit: { opacity: 0 },
  };

  const modalVariants = {
    hidden: { opacity: 0, scale: 0.9, y: 20 },
    visible: { opacity: 1, scale: 1, y: 0, transition: { type: 'spring', damping: 25, stiffness: 300 } },
    exit: { opacity: 0, scale: 0.9, y: 20, transition: { duration: 0.2 } },
  };

  // Conte√∫do do modal a ser renderizado no portal
  const modalContent = (
    <AnimatePresence mode="wait">
      {isOpen && (
        // O cont√™iner pai que cobre toda a tela e atua como o overlay clic√°vel
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center p-4"
          variants={overlayVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          onClick={closeOnOverlayClick ? onClose : undefined}
        >
          {/* Fundo escuro puramente visual, sem eventos de clique */}
          <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" />

          {/* O conte√∫do do modal */}
          <motion.div
            className={clsx(
              'relative w-full max-h-[90vh] flex flex-col',
              'rounded-xl border-2',
              sizeClasses[size],
              variantStyles[variant],
              className
            )}
            variants={modalVariants}
            onClick={(e) => e.stopPropagation()} // Impede que o clique no modal feche-o
          >
            {/* Cabe√ßalho (fixo) */}
            {title && (
              <header className="flex-shrink-0 flex items-center justify-between p-6 border-b border-current/20">
                <h2 className={clsx('text-xl font-bold', variant === 'medieval' && 'font-medieval text-2xl text-glow')}>
                  {title}
                </h2>
                <Button variant="ghost" size="sm" onClick={onClose} className="!p-1" aria-label="Fechar modal">
                  <X className="w-5 h-5" />
                </Button>
              </header>
            )}

            {/* Corpo do modal (√°rea com rolagem) */}
            <main className="flex-1 overflow-y-auto p-6">
              {!title && (
                <Button variant="ghost" size="sm" onClick={onClose} className="!p-1 absolute top-4 right-4 z-10" aria-label="Fechar modal">
                  <X className="w-5 h-5" />
                </Button>
              )}
              {children}
            </main>

            {/* Decora√ß√µes (apenas para o tema medieval) */}
            {variant === 'medieval' && (
              <>
                <div className="absolute top-2 left-2 w-8 h-8 border-l-3 border-t-3 border-amber-400 opacity-60 pointer-events-none" />
                <div className="absolute top-2 right-2 w-8 h-8 border-r-3 border-t-3 border-amber-400 opacity-60 pointer-events-none" />
                <div className="absolute bottom-2 left-2 w-8 h-8 border-l-3 border-b-3 border-amber-400 opacity-60 pointer-events-none" />
                <div className="absolute bottom-2 right-2 w-8 h-8 border-r-3 border-b-3 border-amber-400 opacity-60 pointer-events-none" />
                <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none">
                  <div className="w-12 h-6 bg-amber-600 rounded-full border-2 border-amber-400" />
                </div>
              </>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );

  return createPortal(modalContent, document.body);
}

// =============================================================================
// CONFIRMATION MODAL COMPONENT
// =============================================================================
interface ConfirmModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  variant?: 'danger' | 'warning' | 'info';
}

export function ConfirmModal({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  confirmText = 'Confirmar',
  cancelText = 'Cancelar',
  variant = 'info',
}: ConfirmModalProps) {
  const { playSound } = useTheme();

  const handleConfirm = () => {
    playSound('button_click');
    onConfirm();
    onClose();
  };

  const handleCancel = () => {
    onClose();
  };

  const getVariantProps = () => {
    switch (variant) {
      case 'danger':
        return { modalVariant: 'error' as const, confirmVariant: 'danger' as const };
      case 'warning':
        return { modalVariant: 'medieval' as const, confirmVariant: 'primary' as const };
      default:
        return { modalVariant: 'default' as const, confirmVariant: 'primary' as const };
    }
  };

  const { modalVariant, confirmVariant } = getVariantProps();

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={title} variant={modalVariant} size="sm">
      <div className="space-y-6">
        <p className="text-white/90 leading-relaxed">{message}</p>
        <div className="flex gap-3 justify-end">
          <Button variant="ghost" onClick={handleCancel}>
            {cancelText}
          </Button>
          <Button variant={confirmVariant} onClick={handleConfirm}>
            {confirmText}
          </Button>
        </div>
      </div>
    </Modal>
  );
}

// =============================================================================
// ALERT MODAL COMPONENT
// =============================================================================
interface AlertModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  message: string;
  variant?: 'success' | 'error' | 'warning' | 'info';
}

export function AlertModal({
  isOpen,
  onClose,
  title,
  message,
  variant = 'info',
}: AlertModalProps) {
  const { playSound } = useTheme();

  const handleClose = () => {
    playSound('button_click');
    onClose();
  };

  const getVariantProps = () => {
    switch (variant) {
      case 'success':
        return { modalVariant: 'game' as const, icon: '‚úÖ' };
      case 'error':
        return { modalVariant: 'error' as const, icon: '‚ùå' };
      case 'warning':
        return { modalVariant: 'medieval' as const, icon: '‚ö†Ô∏è' };
      default:
        return { modalVariant: 'default' as const, icon: '‚ÑπÔ∏è' };
    }
  };

  const { modalVariant, icon } = getVariantProps();

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={`${icon} ${title}`} variant={modalVariant} size="sm">
      <div className="space-y-6">
        <p className="text-white/90 leading-relaxed">{message}</p>
        <div className="flex justify-end">
          <Button variant="primary" onClick={handleClose}>
            Entendi
          </Button>
        </div>
      </div>
    </Modal>
  );
}
</file>

<file path="src/components/lobby/CreateRoomModal.tsx">
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { X, Users, Eye, Lock, Globe, Settings } from 'lucide-react';
import { useRouter } from 'next/router';
import { toast } from 'react-hot-toast';
import Modal from '@/components/common/Modal';
import Button from '@/components/common/Button';
import { apiService } from '@/services/api';

interface CreateRoomModalProps {
  isOpen: boolean;
  onClose: () => void;
}

interface RoomSettings {
  gameMode: 'CLASSIC' | 'RANKED' | 'CUSTOM';
  timeDay: number;
  timeNight: number;
  timeVoting: number;
  allowSpectators: boolean;
  autoStart: boolean;
}

export default function CreateRoomModal({ isOpen, onClose }: CreateRoomModalProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);

  const [formData, setFormData] = useState({
    name: '',
    isPrivate: false,
    maxPlayers: 12,
    maxSpectators: 8,
  });

  const [settings, setSettings] = useState<RoomSettings>({
    gameMode: 'CLASSIC',
    timeDay: 300,
    timeNight: 120,
    timeVoting: 180,
    allowSpectators: true,
    autoStart: false,
  });

  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSettingsChange = (field: keyof RoomSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name.trim()) {
      toast.error('Nome da sala √© obrigat√≥rio');
      return;
    }

    if (formData.name.length < 3) {
      toast.error('Nome da sala deve ter pelo menos 3 caracteres');
      return;
    }

    setLoading(true);

    try {
      const response = await apiService.post('/api/rooms', {
        ...formData,
        settings
      });

      toast.success('Sala criada com sucesso!');
      onClose();

      // Redirecionar para a sala criada
      router.push(`/room/${response.data.id}`);

    } catch (error: any) {
      console.error('Erro ao criar sala:', error);
      toast.error(error.response?.data?.message || 'Erro ao criar sala');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setFormData({
        name: '',
        isPrivate: false,
        maxPlayers: 12,
        maxSpectators: 8,
      });
      setSettings({
        gameMode: 'CLASSIC',
        timeDay: 300,
        timeNight: 120,
        timeVoting: 180,
        allowSpectators: true,
        autoStart: false,
      });
      setShowAdvanced(false);
      onClose();
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title="üê∫ Criar Nova Sala"
      size="lg"
      variant="medieval"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Nome da Sala */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">
            Nome da Sala *
          </label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => handleInputChange('name', e.target.value)}
            placeholder="Digite o nome da sua sala..."
            maxLength={50}
            className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            disabled={loading}
          />
          <div className="text-xs text-slate-500 mt-1">
            {formData.name.length}/50 caracteres
          </div>
        </div>

        {/* Configura√ß√µes B√°sicas */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* M√°ximo de Jogadores */}
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-2">
              <Users className="w-4 h-4 inline mr-2" />
              M√°ximo de Jogadores
            </label>
            <select
              value={formData.maxPlayers}
              onChange={(e) => handleInputChange('maxPlayers', parseInt(e.target.value))}
              className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={loading}
            >
              {[6, 8, 10, 12, 14, 16].map(num => (
                <option key={num} value={num}>{num} jogadores</option>
              ))}
            </select>
          </div>

          {/* M√°ximo de Espectadores */}
          <div>
            <label className="block text-sm font-medium text-slate-300 mb-2">
              <Eye className="w-4 h-4 inline mr-2" />
              M√°ximo de Espectadores
            </label>
            <select
              value={formData.maxSpectators}
              onChange={(e) => handleInputChange('maxSpectators', parseInt(e.target.value))}
              className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={loading}
            >
              {[0, 4, 8, 12, 16, 20].map(num => (
                <option key={num} value={num}>{num === 0 ? 'Sem espectadores' : `${num} espectadores`}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Tipo de Sala */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-3">
            Tipo de Sala
          </label>
          <div className="grid grid-cols-2 gap-3">
            <button
              type="button"
              onClick={() => handleInputChange('isPrivate', false)}
              className={`p-4 rounded-lg border-2 transition-all ${!formData.isPrivate
                ? 'border-green-500 bg-green-500/10 text-green-400'
                : 'border-slate-600 bg-slate-700/50 text-slate-300'
                }`}
              disabled={loading}
            >
              <Globe className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">P√∫blica</div>
              <div className="text-xs opacity-75">Vis√≠vel no lobby</div>
            </button>

            <button
              type="button"
              onClick={() => handleInputChange('isPrivate', true)}
              className={`p-4 rounded-lg border-2 transition-all ${formData.isPrivate
                ? 'border-blue-500 bg-blue-500/10 text-blue-400'
                : 'border-slate-600 bg-slate-700/50 text-slate-300'
                }`}
              disabled={loading}
            >
              <Lock className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">Privada</div>
              <div className="text-xs opacity-75">Apenas por c√≥digo</div>
            </button>
          </div>
        </div>

        {/* Configura√ß√µes Avan√ßadas */}
        <div>
          <button
            type="button"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="flex items-center gap-2 text-slate-300 hover:text-white transition-colors"
            disabled={loading}
          >
            <Settings className="w-4 h-4" />
            Configura√ß√µes Avan√ßadas
            <motion.div
              animate={{ rotate: showAdvanced ? 180 : 0 }}
              transition={{ duration: 0.2 }}
            >
              <X className="w-4 h-4" />
            </motion.div>
          </button>

          {showAdvanced && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="mt-4 p-4 bg-slate-800/50 rounded-lg border border-slate-600 space-y-4"
            >
              {/* Modo de Jogo */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  Modo de Jogo
                </label>
                <select
                  value={settings.gameMode}
                  onChange={(e) => handleSettingsChange('gameMode', e.target.value)}
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white"
                  disabled={loading}
                >
                  <option value="CLASSIC">Cl√°ssico</option>
                  <option value="RANKED">Ranqueado</option>
                  <option value="CUSTOM">Personalizado</option>
                </select>
              </div>

              {/* Tempos */}
              <div className="grid grid-cols-3 gap-3">
                <div>
                  <label className="block text-xs text-slate-400 mb-1">Tempo Dia (seg)</label>
                  <input
                    type="number"
                    min="60"
                    max="600"
                    value={settings.timeDay}
                    onChange={(e) => handleSettingsChange('timeDay', parseInt(e.target.value))}
                    className="w-full px-2 py-1 bg-slate-700 border border-slate-600 rounded text-white text-sm"
                    disabled={loading}
                  />
                </div>

                <div>
                  <label className="block text-xs text-slate-400 mb-1">Tempo Noite (seg)</label>
                  <input
                    type="number"
                    min="30"
                    max="300"
                    value={settings.timeNight}
                    onChange={(e) => handleSettingsChange('timeNight', parseInt(e.target.value))}
                    className="w-full px-2 py-1 bg-slate-700 border border-slate-600 rounded text-white text-sm"
                    disabled={loading}
                  />
                </div>

                <div>
                  <label className="block text-xs text-slate-400 mb-1">Tempo Vota√ß√£o (seg)</label>
                  <input
                    type="number"
                    min="60"
                    max="300"
                    value={settings.timeVoting}
                    onChange={(e) => handleSettingsChange('timeVoting', parseInt(e.target.value))}
                    className="w-full px-2 py-1 bg-slate-700 border border-slate-600 rounded text-white text-sm"
                    disabled={loading}
                  />
                </div>
              </div>

              {/* Op√ß√µes */}
              <div className="space-y-2">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={settings.allowSpectators}
                    onChange={(e) => handleSettingsChange('allowSpectators', e.target.checked)}
                    className="rounded"
                    disabled={loading}
                  />
                  <span className="text-sm text-slate-300">Permitir espectadores</span>
                </label>

                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={settings.autoStart}
                    onChange={(e) => handleSettingsChange('autoStart', e.target.checked)}
                    className="rounded"
                    disabled={loading}
                  />
                  <span className="text-sm text-slate-300">In√≠cio autom√°tico quando todos estiverem prontos</span>
                </label>
              </div>
            </motion.div>
          )}
        </div>

        {/* Bot√µes */}
        <div className="flex justify-end gap-3 pt-4 border-t border-slate-700">
          <Button
            variant="ghost"
            onClick={handleClose}
            disabled={loading}
          >
            Cancelar
          </Button>

          <Button
            type="submit"
            variant="primary"
            loading={loading}
            className="min-w-[120px]"
          >
            {loading ? 'Criando...' : 'Criar Sala'}
          </Button>
        </div>
      </form>
    </Modal>
  );
}
</file>

<file path="src/components/lobby/JoinRoomModal.tsx">
import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { toast } from 'react-hot-toast';
import { Hash, Users, Eye } from 'lucide-react';
import Modal from '@/components/common/Modal';
import Button from '@/components/common/Button';
import { apiService } from '@/services/api';

interface JoinRoomModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function JoinRoomModal({ isOpen, onClose }: JoinRoomModalProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [roomCode, setRoomCode] = useState('');
  const [asSpectator, setAsSpectator] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!roomCode.trim()) {
      toast.error('C√≥digo da sala √© obrigat√≥rio');
      return;
    }

    if (roomCode.length < 3) {
      toast.error('C√≥digo deve ter pelo menos 3 caracteres');
      return;
    }

    setLoading(true);

    try {
      const response = await apiService.post('/api/rooms/join-by-code', {
        code: roomCode.toUpperCase(),
        asSpectator
      });

      toast.success(`${asSpectator ? 'Espectando' : 'Entrou na'} sala com sucesso!`);
      onClose();

      // Redirecionar para a sala
      router.push(`/room/${response.data.room.id}`);

    } catch (error: any) {
      console.error('Erro ao entrar na sala:', error);
      const errorMsg = error.response?.data?.message || 'Erro ao entrar na sala';

      if (errorMsg.includes('not found')) {
        toast.error('Sala n√£o encontrada. Verifique o c√≥digo.');
      } else if (errorMsg.includes('full')) {
        toast.error('Sala lotada. Tente entrar como espectador.');
      } else {
        toast.error(errorMsg);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setRoomCode('');
      setAsSpectator(false);
      onClose();
    }
  };

  const formatCode = (code: string) => {
    return code.replace(/[^A-Z0-9]/g, '').slice(0, 8);
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatCode(e.target.value.toUpperCase());
    setRoomCode(formatted);
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title="üîë Entrar por C√≥digo"
      size="md"
      variant="medieval"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="text-center">
          <div className="text-6xl mb-4">üéØ</div>
          <p className="text-slate-300">
            Digite o c√≥digo da sala privada para entrar
          </p>
        </div>

        {/* Campo de C√≥digo */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">
            <Hash className="w-4 h-4 inline mr-2" />
            C√≥digo da Sala
          </label>
          <input
            type="text"
            value={roomCode}
            onChange={handleCodeChange}
            placeholder="Ex: ABC123"
            maxLength={8}
            className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white text-center text-2xl font-mono tracking-wider placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 uppercase"
            disabled={loading}
            autoComplete="off"
          />
          <div className="text-xs text-slate-500 mt-1 text-center">
            {roomCode.length}/8 caracteres
          </div>
        </div>

        {/* Op√ß√µes de Entrada */}
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-3">
            Como entrar na sala?
          </label>
          <div className="grid grid-cols-2 gap-3">
            <button
              type="button"
              onClick={() => setAsSpectator(false)}
              className={`p-4 rounded-lg border-2 transition-all ${!asSpectator
                ? 'border-green-500 bg-green-500/10 text-green-400'
                : 'border-slate-600 bg-slate-700/50 text-slate-300'
                }`}
              disabled={loading}
            >
              <Users className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">Como Jogador</div>
              <div className="text-xs opacity-75">Participar do jogo</div>
            </button>

            <button
              type="button"
              onClick={() => setAsSpectator(true)}
              className={`p-4 rounded-lg border-2 transition-all ${asSpectator
                ? 'border-blue-500 bg-blue-500/10 text-blue-400'
                : 'border-slate-600 bg-slate-700/50 text-slate-300'
                }`}
              disabled={loading}
            >
              <Eye className="w-6 h-6 mx-auto mb-2" />
              <div className="font-medium">Como Espectador</div>
              <div className="text-xs opacity-75">Apenas assistir</div>
            </button>
          </div>
        </div>

        {/* Informa√ß√µes */}
        <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-600">
          <h4 className="font-medium text-slate-300 mb-2">üí° Dicas:</h4>
          <ul className="text-sm text-slate-400 space-y-1">
            <li>‚Ä¢ O c√≥digo da sala tem entre 3-8 caracteres</li>
            <li>‚Ä¢ C√≥digos n√£o fazem distin√ß√£o entre mai√∫sculas e min√∫sculas</li>
            <li>‚Ä¢ Se a sala estiver cheia, voc√™ pode entrar como espectador</li>
            <li>‚Ä¢ Salas privadas n√£o aparecem na lista p√∫blica</li>
          </ul>
        </div>

        {/* Bot√µes */}
        <div className="flex justify-end gap-3 pt-4 border-t border-slate-700">
          <Button
            variant="ghost"
            onClick={handleClose}
            disabled={loading}
          >
            Cancelar
          </Button>

          <Button
            type="submit"
            variant="primary"
            loading={loading}
            disabled={!roomCode.trim()}
            className="min-w-[120px]"
          >
            {loading ? 'Entrando...' : asSpectator ? 'Espectear' : 'Entrar'}
          </Button>
        </div>
      </form>
    </Modal>
  );
}
</file>

<file path="src/components/room/ActionButtons.tsx">
import React from 'react';
import { motion } from 'framer-motion';
import {
  Check,
  Clock,
  Play,
  Wifi,
  WifiOff,
  AlertCircle,
  Crown
} from 'lucide-react';

interface ActionButtonsProps {
  isHost: boolean;
  isReady: boolean;
  canStartGame: boolean;
  isConnected: boolean;
  onToggleReady: () => void;
  onStartGame: () => void;
}

export default function ActionButtons({
  isHost,
  isReady,
  canStartGame,
  isConnected,
  onToggleReady,
  onStartGame
}: ActionButtonsProps) {
  return (
    <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700">
      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
        {isHost && <Crown className="w-5 h-5 text-yellow-400" />}
        {isHost ? 'Controles do Host' : 'A√ß√µes'}
      </h3>

      <div className="space-y-3">
        {/* Bot√£o Ready para todos */}
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={onToggleReady}
          disabled={!isConnected}
          className={`
            w-full py-3 px-4 rounded-lg font-medium transition-all duration-200
            flex items-center justify-center gap-2
            ${isReady
              ? 'bg-green-600 hover:bg-green-700 text-white shadow-lg'
              : 'bg-orange-600 hover:bg-orange-700 text-white'
            }
            disabled:opacity-50 disabled:cursor-not-allowed
          `}
        >
          {isReady ? (
            <>
              <Check className="w-5 h-5" />
              Pronto! (Clique para cancelar)
            </>
          ) : (
            <>
              <Clock className="w-5 h-5" />
              Marcar como Pronto
            </>
          )}
        </motion.button>

        {/* Bot√£o Start Game apenas para host */}
        {isHost && (
          <motion.button
            whileHover={canStartGame ? { scale: 1.02 } : {}}
            whileTap={canStartGame ? { scale: 0.98 } : {}}
            onClick={onStartGame}
            disabled={!canStartGame || !isConnected}
            className={`
              w-full py-3 px-4 rounded-lg font-medium transition-all duration-200
              flex items-center justify-center gap-2
              ${canStartGame
                ? 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg shadow-green-600/25'
                : 'bg-slate-600 text-slate-400 cursor-not-allowed'
              }
              disabled:opacity-50
            `}
          >
            <Play className="w-5 h-5" />
            {canStartGame ? 'üéÆ Iniciar Jogo!' : 'Aguardando jogadores prontos...'}
          </motion.button>
        )}

        {/* Informa√ß√µes adicionais para host */}
        {isHost && (
          <div className="mt-4 p-3 bg-slate-700/30 rounded-lg border border-slate-600/50">
            <div className="flex items-center gap-2 text-sm text-slate-300 mb-2">
              <AlertCircle className="w-4 h-4" />
              Requisitos para iniciar:
            </div>
            <ul className="text-xs text-slate-400 space-y-1">
              <li>‚Ä¢ M√≠nimo de 3 jogadores</li>
              <li>‚Ä¢ Todos os jogadores prontos</li>
              <li>‚Ä¢ Conex√£o est√°vel</li>
            </ul>
          </div>
        )}

        {/* Indicador de conex√£o */}
        <div className="flex items-center justify-center gap-2 text-sm pt-2 border-t border-slate-600/50">
          {isConnected ? (
            <>
              <Wifi className="w-4 h-4 text-green-500" />
              <span className="text-green-500">Conectado</span>
            </>
          ) : (
            <>
              <WifiOff className="w-4 h-4 text-red-500" />
              <span className="text-red-500">Desconectado</span>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/room/PlayerList.tsx">
import React from 'react'; // ‚úÖ CORRE√á√ÉO CRUCIAL: Adicionar esta linha.
import { motion, AnimatePresence } from 'framer-motion';
import {
  Users,
  Crown,
  Check,
  Clock,
  UserX,
  Eye
} from 'lucide-react';
import { Player } from '@/types';

interface PlayerListProps {
  players: Player[];
  spectators: Player[];
  currentUserId: string;
  isHost: boolean;
  onKickPlayer: (playerId: string) => void;
  maxPlayers: number;
  maxSpectators: number;
}

export default function PlayerList({
  players,
  spectators,
  currentUserId,
  isHost,
  onKickPlayer,
  maxPlayers,
  maxSpectators
}: PlayerListProps) {
  return (
    <div className="space-y-6">
      <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Users className="w-5 h-5" />
            Jogadores ({players.length}/{maxPlayers})
          </h3>
        </div>

        <div className="space-y-2">
          <AnimatePresence>
            {players.map((player) => (
              <motion.div
                key={player.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                className={`
                  flex items-center justify-between p-3 rounded-lg
                  ${player.isConnected ? 'bg-slate-700/50' : 'bg-red-900/30'}
                  border ${player.isConnected ? 'border-slate-600' : 'border-red-600/50'}
                `}
              >
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold">
                      {player.username[0].toUpperCase()}
                    </div>
                    {player.isHost && (
                      <Crown className="absolute -top-1 -right-1 w-4 h-4 text-yellow-400" />
                    )}
                    <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-slate-800 ${player.isConnected ? 'bg-green-500' : 'bg-red-500'}`} />
                  </div>

                  <div>
                    <div className="flex items-center gap-2">
                      <span className="font-medium">
                        {player.username}
                        {player.userId === currentUserId && " (Voc√™)"}
                      </span>
                      {player.isHost && (
                        <span className="text-xs bg-yellow-600 px-2 py-1 rounded-full">
                          HOST
                        </span>
                      )}
                    </div>
                    <div className="text-xs text-slate-400">
                      {player.isConnected ? 'Online' : 'Desconectado'}
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs ${player.isReady ? 'bg-green-600/20 text-green-400 border border-green-600/30' : 'bg-orange-600/20 text-orange-400 border border-orange-600/30'}`}>
                    {player.isReady ? (
                      <>
                        <Check className="w-3 h-3" />
                        Pronto
                      </>
                    ) : (
                      <>
                        <Clock className="w-3 h-3" />
                        Aguardando
                      </>
                    )}
                  </div>

                  {isHost && player.userId !== currentUserId && (
                    <button
                      onClick={() => onKickPlayer(player.id)}
                      className="p-1 rounded text-red-400 hover:bg-red-600/20 transition-colors"
                      title="Expulsar jogador"
                    >
                      <UserX className="w-4 h-4" />
                    </button>
                  )}
                </div>
              </motion.div>
            ))}
          </AnimatePresence>

          {Array.from({ length: maxPlayers - players.length }).map((_, index) => (
            <div key={index} className="flex items-center p-3 rounded-lg border-2 border-dashed border-slate-600">
              <div className="w-10 h-10 rounded-full bg-slate-700/50 flex items-center justify-center">
                <Users className="w-5 h-5 text-slate-500" />
              </div>
              <span className="ml-3 text-slate-500">Aguardando jogador...</span>
            </div>
          ))}
        </div>
      </div>

      {maxSpectators > 0 && (
        <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold flex items-center gap-2">
              <Eye className="w-5 h-5" />
              Espectadores ({spectators.length}/{maxSpectators})
            </h3>
          </div>

          <div className="space-y-2">
            <AnimatePresence>
              {spectators.map((spectator) => (
                <motion.div
                  key={spectator.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  className="flex items-center justify-between p-2 rounded-lg bg-slate-700/30 border border-slate-600/50"
                >
                  <div className="flex items-center gap-2">
                    <div className="relative">
                      <div className="w-8 h-8 rounded-full bg-gradient-to-br from-slate-500 to-slate-600 flex items-center justify-center text-white text-sm">
                        {spectator.username[0].toUpperCase()}
                      </div>
                      <div className={`absolute -bottom-0.5 -right-0.5 w-2 h-2 rounded-full border border-slate-800 ${spectator.isConnected ? 'bg-green-500' : 'bg-red-500'}`} />
                    </div>
                    <span className="text-sm">
                      {spectator.username}
                      {spectator.userId === currentUserId && " (Voc√™)"}
                    </span>
                  </div>

                  {isHost && spectator.userId !== currentUserId && (
                    <button
                      onClick={() => onKickPlayer(spectator.id)}
                      className="p-1 rounded text-red-400 hover:bg-red-600/20 transition-colors"
                      title="Expulsar espectador"
                    >
                      <UserX className="w-3 h-3" />
                    </button>
                  )}
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/room/RoomChat.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, Send } from 'lucide-react';
import { ChatMessage } from '@/types';

interface RoomChatProps {
  messages: ChatMessage[];
  onSendMessage: (message: string) => void;
  currentUserId: string;
  isConnected: boolean;
}

export default function RoomChat({
  messages,
  onSendMessage,
  currentUserId,
  isConnected
}: RoomChatProps) {
  const [newMessage, setNewMessage] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !isConnected) return;

    onSendMessage(newMessage.trim());
    setNewMessage('');
    inputRef.current?.focus();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(e);
    }
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString('pt-BR', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="bg-slate-800/50 rounded-lg border border-slate-700 flex flex-col h-96">
      {/* Header */}
      <div className="p-4 border-b border-slate-700">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <MessageCircle className="w-5 h-5" />
          Chat da Sala
          {!isConnected && (
            <span className="text-xs bg-red-600/20 text-red-400 px-2 py-1 rounded-full">
              Desconectado
            </span>
          )}
        </h3>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-3 scrollbar-thin scrollbar-thumb-slate-600 scrollbar-track-slate-800">
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`
                ${message.channel === 'system'
                  ? 'text-center text-sm text-slate-400 italic'
                  : message.userId === currentUserId
                    ? 'flex justify-end'
                    : 'flex justify-start'
                }
              `}
            >
              {message.channel === 'system' ? (
                <span>{message.message}</span>
              ) : (
                <div className={`
                  max-w-xs p-3 rounded-lg
                  ${message.userId === currentUserId
                    ? 'bg-blue-600 text-white rounded-br-none'
                    : 'bg-slate-700 text-white rounded-bl-none'
                  }
                `}>
                  <div className="text-xs opacity-75 mb-1">
                    {message.username} ‚Ä¢ {formatTime(message.timestamp)}
                  </div>
                  <div className="break-words">{message.message}</div>
                </div>
              )}
            </motion.div>
          ))}
        </AnimatePresence>
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <form onSubmit={handleSendMessage} className="p-4 border-t border-slate-700">
        <div className="flex gap-2">
          <input
            ref={inputRef}
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={isConnected ? "Digite sua mensagem..." : "Conectando..."}
            disabled={!isConnected}
            className="flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:opacity-50"
            maxLength={200}
          />
          <button
            type="submit"
            disabled={!newMessage.trim() || !isConnected}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-slate-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center gap-2"
          >
            <Send className="w-4 h-4" />
          </button>
        </div>
        <div className="text-xs text-slate-500 mt-1">
          {newMessage.length}/200 caracteres
        </div>
      </form>
    </div>
  );
}
</file>

<file path="src/components/room/WaitingRoom.tsx">
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useRouter } from 'next/router';
import { ArrowLeft, Crown, Share, Volume2 } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import { useSocket } from '@/context/SocketContext';
import { Player, Room, ChatMessage } from '@/types';
import { toast } from 'react-hot-toast';

import PlayerList from './PlayerList';
import RoomChat from './RoomChat';
import ActionButtons from './ActionButtons';

interface WaitingRoomProps {
  roomId: string;
}

export default function WaitingRoom({ roomId }: WaitingRoomProps) {
  const router = useRouter();
  const { user, getToken, isAuthenticated } = useAuth();
  const { connect, disconnect, sendMessage, status, isConnected, pingLatency } = useSocket();

  const [room, setRoom] = useState<Room | null>(null);
  const [players, setPlayers] = useState<Player[]>([]);
  const [spectators, setSpectators] = useState<Player[]>([]);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [loading, setLoading] = useState(true);

  const currentUserId = user?.id || '';
  const isHost = room?.hostId === currentUserId;
  const currentPlayer = players.find(p => p.userId === currentUserId);
  const isReady = currentPlayer?.isReady || false;

  const canStartGame = players.length >= 3 &&
    players.every(p => p.isReady) &&
    isConnected &&
    isHost;

  useEffect(() => {
    if (isAuthenticated && roomId) {
      const token = getToken();
      if (token) {
        const baseUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001';
        const wsUrl = `${baseUrl.replace('http', 'ws')}/ws/${roomId}?token=${encodeURIComponent(token)}`;

        console.log(`WaitingRoom: Connecting to ${wsUrl}`);
        connect(wsUrl);
      }
    }

    return () => {
      console.log("WaitingRoom: Unmounting, disconnecting...");
      disconnect();
    };
  }, [roomId, isAuthenticated, getToken, connect, disconnect]);

  useEffect(() => {
    const handleMessage = (event: CustomEvent) => {
      const { type, data } = event.detail;
      console.log('WaitingRoom received message:', type, data);

      switch (type) {
        case 'room-joined':
          if (data.room) {
            setRoom(data.room);
            setLoading(false);
          }
          if (data.players) setPlayers(data.players);
          if (data.spectators) setSpectators(data.spectators);
          toast.success(`Entrou na sala: ${data.room?.name || roomId}`);
          break;

        case 'player-joined':
          if (data.player) {
            setPlayers(prev => {
              const exists = prev.find(p => p.userId === data.player.userId);
              if (exists) return prev;
              return [...prev, data.player];
            });

            setMessages(prev => [...prev, {
              id: Date.now().toString(),
              userId: 'system',
              username: 'Sistema',
              message: `${data.player.username} entrou na sala`,
              channel: 'system',
              timestamp: new Date().toISOString()
            }]);
          }
          break;

        case 'player-left':
          if (data.userId) {
            setPlayers(prev => prev.filter(p => p.userId !== data.userId));
            setSpectators(prev => prev.filter(s => s.userId !== data.userId));

            if (data.username) {
              setMessages(prev => [...prev, {
                id: Date.now().toString(),
                userId: 'system',
                username: 'Sistema',
                message: `${data.username} saiu da sala`,
                channel: 'system',
                timestamp: new Date().toISOString()
              }]);
            }
          }
          break;

        case 'player-ready':
          if (data.userId !== undefined && data.ready !== undefined) {
            setPlayers(prev => prev.map(p =>
              p.userId === data.userId
                ? { ...p, isReady: data.ready }
                : p
            ));
          }
          break;

        case 'chat-message':
          if (data.message || data) {
            const message = data.message || data;
            setMessages(prev => [...prev, message]);
          }
          break;

        case 'game-starting':
        case 'game-started':
          toast.success('üéÆ Jogo iniciando!');
          setTimeout(() => {
            router.push(`/game/${roomId}`);
          }, 2000);
          break;

        case 'room-updated':
          if (data.room) setRoom(data.room);
          if (data.players) setPlayers(data.players);
          if (data.spectators) setSpectators(data.spectators);
          break;

        case 'error':
          if (data.message && data.code !== 'UNKNOWN_MESSAGE_TYPE') {
            toast.error(data.message);
          }
          break;

        default:
          break;
      }
    };

    window.addEventListener('websocket-message', handleMessage as EventListener);
    return () => {
      window.removeEventListener('websocket-message', handleMessage as EventListener);
    };
  }, [router, roomId]);

  useEffect(() => {
    const fetchRoomData = async () => {
      try {
        await new Promise(resolve => setTimeout(resolve, 5000));

        if (!room && !loading) {
          console.log('WaitingRoom: No room data from WebSocket, using mock data');

          const mockRoom: Room = {
            id: roomId,
            name: 'Sala do Lobisomem',
            code: 'ABC123',
            isPrivate: false,
            maxPlayers: 12,
            maxSpectators: 8,
            currentPlayers: 0,
            currentSpectators: 0,
            status: 'WAITING',
            hostId: 'user-1',
            hostUsername: 'Host',
            canJoin: true,
            createdAt: new Date().toISOString(),
            settings: {
              gameMode: 'CLASSIC',
              timeDay: 300,
              timeNight: 120,
              timeVoting: 180,
              allowSpectators: true,
              autoStart: false
            }
          };

          setRoom(mockRoom);
        }

        setLoading(false);
      } catch (error) {
        console.error('Failed to fetch room data:', error);
        toast.error('Erro ao carregar dados da sala');
        router.push('/lobby');
      }
    };

    if (roomId && loading) {
      fetchRoomData();
    }
  }, [roomId, room, loading, router]);

  const handleToggleReady = () => {
    if (!sendMessage('player-ready', { ready: !isReady })) {
      toast.error('Erro ao atualizar status');
    }
  };

  const handleStartGame = () => {
    if (!isHost || !canStartGame) return;

    if (!sendMessage('start-game', {})) {
      toast.error('Erro ao iniciar jogo');
      return;
    }

    toast.success('Iniciando jogo...');
  };

  const handleKickPlayer = (playerId: string) => {
    if (!isHost) return;

    if (!sendMessage('kick-player', { playerId })) {
      toast.error('Erro ao expulsar jogador');
    }
  };

  const handleSendChatMessage = (message: string) => {
    if (!sendMessage('chat-message', { message })) {
      toast.error('Erro ao enviar mensagem');
    }
  };

  const handleShareRoom = async () => {
    if (!room) return;

    const shareUrl = `${window.location.origin}/room/${room.id}`;

    try {
      await navigator.clipboard.writeText(shareUrl);
      toast.success('Link da sala copiado!');
    } catch (error) {
      toast.error('Erro ao copiar link');
    }
  };

  const handleLeaveRoom = () => {
    disconnect();
    router.push('/lobby');
  };

  if (loading || !room) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üê∫</div>
          <div className="text-xl text-white">Carregando sala...</div>
          <div className="text-sm text-slate-400 mt-2">
            Status: {status === 'connecting' ? 'Conectando...' : status}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
      <div className="bg-slate-800/80 border-b border-slate-700 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={handleLeaveRoom}
                className="p-2 rounded-lg bg-slate-700 hover:bg-slate-600 transition-colors"
                title="Voltar ao lobby"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>

              <div className="text-3xl">üê∫</div>

              <div>
                <h1 className="text-2xl font-bold">{room.name}</h1>
                <div className="flex items-center gap-4 text-sm text-slate-400">
                  <span>C√≥digo: {room.code}</span>
                  <span>‚Ä¢</span>
                  <span className="flex items-center gap-1">
                    <Crown className="w-4 h-4" />
                    Host: {room.hostUsername}
                  </span>
                  <span>‚Ä¢</span>
                  <span className="flex items-center gap-1">
                    Status:
                    {isConnected ? (
                      <span className="text-green-400 ml-1">üü¢ Conectado</span>
                    ) : (
                      <span className="text-red-400 ml-1">üî¥ {status}</span>
                    )}
                  </span>
                  {isConnected && pingLatency > 0 && (
                    <>
                      <span>‚Ä¢</span>
                      <span>Ping: {pingLatency}ms</span>
                    </>
                  )}
                </div>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <button
                onClick={handleShareRoom}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors flex items-center gap-2"
              >
                <Share className="w-4 h-4" />
                Compartilhar
              </button>

              <div className="text-right">
                <div className="text-sm text-slate-400">Jogadores Prontos</div>
                <div className="text-lg font-bold">
                  {players.filter(p => p.isReady).length}/{players.length}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <PlayerList
              players={players}
              spectators={spectators}
              currentUserId={currentUserId}
              isHost={isHost}
              onKickPlayer={handleKickPlayer}
              maxPlayers={room.maxPlayers}
              maxSpectators={room.maxSpectators}
            />
          </div>

          <div className="space-y-6">
            <ActionButtons
              isHost={isHost}
              isReady={isReady}
              canStartGame={canStartGame}
              isConnected={isConnected}
              onToggleReady={handleToggleReady}
              onStartGame={handleStartGame}
            />

            <RoomChat
              messages={messages}
              onSendMessage={handleSendChatMessage}
              currentUserId={currentUserId}
              isConnected={isConnected}
            />
          </div>
        </div>

        {status !== 'connected' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-6 bg-yellow-900/20 border border-yellow-600/30 rounded-lg p-4"
          >
            <div className="flex items-center gap-3">
              <div className="animate-spin">
                <Volume2 className="w-5 h-5 text-yellow-400" />
              </div>
              <div>
                <div className="font-medium text-yellow-400">
                  {status === 'connecting' && 'Conectando ao servidor...'}
                  {status === 'reconnecting' && 'Tentando reconectar...'}
                  {status === 'error' && 'Erro de conex√£o'}
                  {status === 'disconnected' && 'Desconectado do servidor'}
                </div>
                <div className="text-sm text-yellow-300/70 mt-1">
                  {status === 'reconnecting' && 'Aguarde enquanto tentamos restabelecer a conex√£o'}
                  {status === 'error' && 'Verifique sua conex√£o com a internet'}
                  {status === 'disconnected' && 'A conex√£o foi perdida'}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/context/AuthContext.tsx">
'use client';

import { createContext, useContext, useEffect, useState, ReactNode, useMemo } from 'react';
import { User, AuthTokens, LoginRequest, RegisterRequest } from '@/types';
import { authService } from '@/services/auth';
import { toast } from 'react-hot-toast';
import Cookies from 'js-cookie';

// =============================================================================
// CONTEXT TYPES
// =============================================================================
interface AuthContextType {
  // State
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;

  // Actions
  login: (credentials: LoginRequest) => Promise<boolean>;
  register: (data: RegisterRequest) => Promise<boolean>;
  logout: () => void;
  refreshToken: () => Promise<boolean>;
  updateUser: (updates: Partial<User>) => void;

  // Utils
  getToken: () => string | null;
  isTokenExpired: () => boolean;
}

// =============================================================================
// CONTEXT CREATION
// =============================================================================
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// =============================================================================
// PROVIDER COMPONENT
// =============================================================================
interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // =============================================================================
  // ‚úÖ COMPUTED VALUES - MELHORADO COM VERIFICA√á√ÉO COMPLETA
  // =============================================================================
  const getToken = (): string | null => {
    return Cookies.get('access_token') || null;
  };

  // ‚úÖ CORRIGIDO: isAuthenticated com verifica√ß√£o completa
  const isAuthenticated = useMemo(() => {
    const token = getToken();
    return !!user && !!token && !isLoading;
  }, [user, isLoading]);

  // =============================================================================
  // TOKEN MANAGEMENT
  // =============================================================================
  const setTokens = (tokens: AuthTokens) => {
    // Set access token with 7-day expiry
    Cookies.set('access_token', tokens.accessToken, {
      expires: 7,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
    });

    // Set refresh token if provided
    if (tokens.refreshToken) {
      Cookies.set('refresh_token', tokens.refreshToken, {
        expires: 30,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
      });
    }
  };

  const clearTokens = () => {
    Cookies.remove('access_token');
    Cookies.remove('refresh_token');
  };

  const isTokenExpired = (): boolean => {
    const token = getToken();
    if (!token) return true;

    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
    } catch {
      return true;
    }
  };

  // =============================================================================
  // ‚úÖ AUTHENTICATION ACTIONS - CORRIGIDO CONFORME O GUIA
  // =============================================================================
  const login = async (credentials: LoginRequest): Promise<boolean> => {
    setIsLoading(true);

    // ‚úÖ CORRIGIDO: A chamada de servi√ßo agora NUNCA vai dar "throw" por um erro 401
    const response = await authService.login(credentials);

    setIsLoading(false);

    if (response.success && response.data) {
      // L√≥gica de sucesso...
      setUser(response.data.user);
      setTokens(response.data.tokens);
      toast.success(`Bem-vindo de volta, ${response.data.user.username}! üê∫`);
      return true;
    } else {
      // L√≥gica de falha...
      // A mensagem de erro vem direto do backend!
      const errorMessage = response.message || response.error || 'Ocorreu uma falha.';
      toast.error(errorMessage); // Isso vai mostrar "Email ou senha incorretos"
      return false;
    }
  };

  const register = async (data: RegisterRequest): Promise<boolean> => {
    setIsLoading(true);

    // ‚úÖ CORRIGIDO: A chamada de servi√ßo agora NUNCA vai dar "throw" por um erro 409
    const response = await authService.register(data);

    setIsLoading(false);

    if (response.success && response.data) {
      // L√≥gica de sucesso...
      setUser(response.data.user);
      setTokens(response.data.tokens);
      toast.success(`Conta criada com sucesso! Bem-vindo, ${data.username}! üéÆ`);
      return true;
    } else {
      // L√≥gica de falha...
      // A mensagem de erro vem direto do backend!
      const errorMessage = response.message || response.error || 'Erro ao criar conta';
      toast.error(errorMessage); // Isso vai mostrar "Email j√° est√° em uso"
      return false;
    }
  };

  const logout = () => {
    setUser(null);
    clearTokens();
    toast.success('Logout realizado com sucesso!');

    // Redirect to home page
    if (typeof window !== 'undefined') {
      window.location.href = '/';
    }
  };

  const refreshToken = async (): Promise<boolean> => {
    try {
      const refreshToken = Cookies.get('refresh_token');
      if (!refreshToken) return false;

      const response = await authService.refreshToken(refreshToken);

      if (response.success && response.data) {
        setTokens(response.data.tokens);
        return true;
      }

      return false;
    } catch (error) {
      console.error('Refresh token error:', error);
      return false;
    }
  };

  const updateUser = (updates: Partial<User>) => {
    if (user) {
      setUser({ ...user, ...updates });
    }
  };

  // =============================================================================
  // ‚úÖ INITIALIZATION - MELHORADO COM MELHOR CONTROLE DE LOADING
  // =============================================================================
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        setIsLoading(true);
        const token = getToken();

        if (!token || isTokenExpired()) {
          // Try to refresh token
          const refreshed = await refreshToken();
          if (!refreshed) {
            setIsLoading(false);
            return;
          }
        }

        // Get user profile
        const profileResponse = await authService.getProfile();
        if (profileResponse.success && profileResponse.data) {
          setUser(profileResponse.data);
        } else {
          // Token is invalid, clear it
          clearTokens();
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        clearTokens();
      } finally {
        setIsLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // =============================================================================
  // TOKEN REFRESH SCHEDULER
  // =============================================================================
  useEffect(() => {
    if (!isAuthenticated) return;

    // Refresh token every 30 minutes if user is active
    const interval = setInterval(async () => {
      if (!isTokenExpired()) return;

      const refreshed = await refreshToken();
      if (!refreshed) {
        logout();
      }
    }, 30 * 60 * 1000); // 30 minutes

    return () => clearInterval(interval);
  }, [isAuthenticated]);

  // =============================================================================
  // ‚úÖ CONTEXT VALUE - MEMOIZADO PARA EVITAR RE-RENDERS DESNECESS√ÅRIOS
  // =============================================================================
  const contextValue = useMemo<AuthContextType>(() => ({
    // State
    user,
    isAuthenticated,
    isLoading,

    // Actions
    login,
    register,
    logout,
    refreshToken,
    updateUser,

    // Utils
    getToken,
    isTokenExpired,
  }), [user, isAuthenticated, isLoading]);

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

// =============================================================================
// HOOK
// =============================================================================
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// =============================================================================
// HOC FOR PROTECTED ROUTES
// =============================================================================
export function withAuth<P extends object>(Component: React.ComponentType<P>) {
  return function AuthenticatedComponent(props: P) {
    const { isAuthenticated, isLoading } = useAuth();

    if (isLoading) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-medieval-900">
          <div className="text-white text-xl font-medieval">
            üê∫ Carregando...
          </div>
        </div>
      );
    }

    if (!isAuthenticated) {
      if (typeof window !== 'undefined') {
        window.location.href = '/auth/login';
      }
      return null;
    }

    return <Component {...props} />;
  };
}
</file>

<file path="src/context/SocketContext.tsx">
'use client';

import { createContext, useContext, ReactNode, useMemo } from 'react';
import { useWebSocket } from '@/hooks';
import type { UseWebSocketReturn } from '@/hooks';

const SocketContext = createContext<UseWebSocketReturn | undefined>(undefined);

export function SocketProvider({ children }: { children: ReactNode }) {
  const webSocketApi = useWebSocket();

  const value = useMemo(() => webSocketApi, [webSocketApi]);

  return (
    <SocketContext.Provider value={value}>
      {children}
    </SocketContext.Provider>
  );
}

export function useSocket(): UseWebSocketReturn {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
}
</file>

<file path="src/context/ThemeContext.tsx">
import React, { createContext, useContext, useState, useEffect } from 'react';
import audioService from '@/services/audioService';

// =============================================================================
// TYPES
// =============================================================================
interface PhaseColors {
  background: string;
  text: string;
  accent: string;
  border: string;
}

interface AudioConfig {
  musicVolume: number;
  sfxVolume: number;
  enabled: boolean;
}

interface ThemeContextType {
  theme: 'werewolf' | 'medieval' | 'modern';
  setTheme: (theme: 'werewolf' | 'medieval' | 'modern') => void;
  playSound: (soundId: string) => void;
  playMusic: (musicId: string) => void;
  stopMusic: () => void;
  setMusicVolume: (volume: number) => void;
  setSoundVolume: (volume: number) => void;
  musicVolume: number;
  soundVolume: number;
  isMusicPlaying: boolean;
  isAudioUnblocked: boolean;
  getPhaseColors: () => PhaseColors;
  getThemeClass: () => string;
  audioConfig: AudioConfig;
  updateAudioConfig: (config: Partial<AudioConfig>) => void;
}

// =============================================================================
// THEME CONTEXT
// =============================================================================
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

// =============================================================================
// THEME PROVIDER
// =============================================================================
export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<'werewolf' | 'medieval' | 'modern'>('werewolf');
  const [audioConfig, setAudioConfig] = useState<AudioConfig>({
    musicVolume: 0.5,
    sfxVolume: 0.7,
    enabled: true,
  });

  // =============================================================================
  // AUDIO FUNCTIONS (delegando para o audioService)
  // =============================================================================
  const playSound = (soundId: string) => {
    if (audioConfig.enabled) {
      audioService.playSound(soundId);
    }
  };

  const playMusic = (musicId: string) => {
    if (audioConfig.enabled) {
      audioService.playMusic(musicId);
    }
  };

  const stopMusic = () => {
    audioService.stopMusic();
  };

  const setMusicVolume = (volume: number) => {
    const newConfig = { ...audioConfig, musicVolume: volume };
    setAudioConfig(newConfig);
    audioService.setMusicVolume(volume);
  };

  const setSoundVolume = (volume: number) => {
    const newConfig = { ...audioConfig, sfxVolume: volume };
    setAudioConfig(newConfig);
    audioService.setSoundVolume(volume);
  };

  const updateAudioConfig = (config: Partial<AudioConfig>) => {
    const newConfig = { ...audioConfig, ...config };
    setAudioConfig(newConfig);

    // Atualizar volumes no audioService
    if (config.musicVolume !== undefined) {
      audioService.setMusicVolume(config.musicVolume);
    }
    if (config.sfxVolume !== undefined) {
      audioService.setSoundVolume(config.sfxVolume);
    }

    // Se desabilitou o √°udio, para a m√∫sica
    if (config.enabled === false) {
      audioService.stopMusic();
    }
  };

  // =============================================================================
  // THEME UTILITIES (que o Layout.tsx precisa)
  // =============================================================================
  const getPhaseColors = (): PhaseColors => {
    // Por enquanto retorna cores padr√£o do tema medieval
    // Quando implementar fases do jogo, adicionar l√≥gica aqui
    return {
      background: 'from-medieval-900 to-medieval-800',
      text: 'text-white',
      accent: 'text-salem-300',
      border: 'border-medieval-600',
    };
  };

  const getThemeClass = (): string => {
    return `theme-${theme}`;
  };

  // =============================================================================
  // THEME EFFECT
  // =============================================================================
  useEffect(() => {
    // Aplicar classes do tema
    document.documentElement.setAttribute('data-theme', theme);

    // Aplicar classes espec√≠ficas
    if (theme === 'werewolf') {
      document.documentElement.classList.add('werewolf-theme');
      document.documentElement.classList.remove('medieval-theme', 'modern-theme');
    } else if (theme === 'medieval') {
      document.documentElement.classList.add('medieval-theme');
      document.documentElement.classList.remove('werewolf-theme', 'modern-theme');
    } else {
      document.documentElement.classList.add('modern-theme');
      document.documentElement.classList.remove('werewolf-theme', 'medieval-theme');
    }
  }, [theme]);

  // =============================================================================
  // CONTEXT VALUE
  // =============================================================================
  const value: ThemeContextType = {
    theme,
    setTheme,
    playSound,
    playMusic,
    stopMusic,
    setMusicVolume,
    setSoundVolume,
    musicVolume: audioConfig.musicVolume,
    soundVolume: audioConfig.sfxVolume,
    isMusicPlaying: audioService.isMusicPlaying,
    isAudioUnblocked: audioService.isAudioUnblocked,
    getPhaseColors,
    getThemeClass,
    audioConfig,
    updateAudioConfig,
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

// =============================================================================
// USE THEME HOOK
// =============================================================================
export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}
</file>

<file path="src/hooks/index.ts">
// üê∫ LOBISOMEM ONLINE - Custom Hooks
// Reusable hooks for common functionality

import { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';

// =============================================================================
// TIPOS AUXILIARES PARA HOOKS
// =============================================================================
export interface WebSocketHookOptions {
  autoConnect?: boolean;
  heartbeatInterval?: number;
  maxReconnectAttempts?: number;
  reconnectBackoff?: 'linear' | 'exponential';
}

export interface UseWebSocketReturn {
  socket: WebSocket | null;
  status: 'disconnected' | 'connecting' | 'connected' | 'reconnecting' | 'error';
  isConnected: boolean;
  pingLatency: number;
  reconnectAttempts: number;
  connect: () => void;
  disconnect: () => void;
  sendMessage: (type: string, data?: any) => boolean;
}

// =============================================================================
// ‚úÖ WEBSOCKET HOOK COM HEARTBEAT - CORRIGIDO
// =============================================================================
export function useWebSocket(
  url: string,
  options: WebSocketHookOptions = {}
): UseWebSocketReturn {
  const {
    autoConnect = true,
    heartbeatInterval = 30000, // 30 segundos
    maxReconnectAttempts = 5,
    reconnectBackoff = 'exponential'
  } = options;

  const [socket, setSocket] = useState<WebSocket | null>(null);
  const [status, setStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'reconnecting' | 'error'>('disconnected');
  const [pingLatency, setPingLatency] = useState<number>(0);
  const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);

  const heartbeatRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const pingStartTimeRef = useRef<number>(0);
  const shouldReconnectRef = useRef<boolean>(true);

  const clearHeartbeat = useCallback(() => {
    if (heartbeatRef.current) {
      clearInterval(heartbeatRef.current);
      heartbeatRef.current = null;
    }
  }, []);

  const clearReconnectTimeout = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
  }, []);

  const startHeartbeat = useCallback(() => {
    clearHeartbeat();

    heartbeatRef.current = setInterval(() => {
      if (socket && socket.readyState === WebSocket.OPEN) {
        pingStartTimeRef.current = Date.now();
        socket.send(JSON.stringify({ type: 'ping' }));
      }
    }, heartbeatInterval);
  }, [socket, heartbeatInterval, clearHeartbeat]);

  const calculateReconnectDelay = useCallback((attempts: number) => {
    if (reconnectBackoff === 'linear') {
      return Math.min(1000 * attempts, 30000); // Max 30 segundos
    } else {
      return Math.min(1000 * Math.pow(2, attempts), 30000); // Exponencial, max 30 segundos
    }
  }, [reconnectBackoff]);

  const connect = useCallback(() => {
    // ‚úÖ CORRE√á√ÉO: Validar URL antes de conectar
    if (!url || url === '') {
      console.warn('‚ùå Cannot connect: URL is empty');
      return;
    }

    if (socket && socket.readyState === WebSocket.OPEN) {
      console.log('‚úÖ WebSocket already connected, skipping...');
      return;
    }

    setStatus('connecting');
    shouldReconnectRef.current = true;

    try {
      console.log('üîå Connecting to WebSocket:', url);
      const ws = new WebSocket(url);
      setSocket(ws);

      ws.onopen = () => {
        console.log('‚úÖ WebSocket conectado');
        setStatus('connected');
        setReconnectAttempts(0);
        startHeartbeat();
      };

      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);

          // Responder ao ping com pong
          if (message.type === 'ping') {
            ws.send(JSON.stringify({ type: 'pong' }));
          }

          // Calcular lat√™ncia do ping
          if (message.type === 'pong') {
            const latency = Date.now() - pingStartTimeRef.current;
            setPingLatency(latency);
          }

          // Dispatchar evento customizado para outros componentes
          const customEvent = new CustomEvent('websocket-message', {
            detail: message
          });
          window.dispatchEvent(customEvent);
        } catch (error) {
          console.error('Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.onclose = (event) => {
        console.log('WebSocket fechado:', event.code, event.reason);
        setSocket(null);
        clearHeartbeat();

        if (shouldReconnectRef.current && reconnectAttempts < maxReconnectAttempts) {
          setStatus('reconnecting');
          const delay = calculateReconnectDelay(reconnectAttempts);

          reconnectTimeoutRef.current = setTimeout(() => {
            setReconnectAttempts(prev => prev + 1);
            connect();
          }, delay);
        } else {
          setStatus('disconnected');
        }
      };

      ws.onerror = (error) => {
        console.error('Erro WebSocket:', error);
        setStatus('error');
      };

    } catch (error) {
      console.error('Erro ao criar WebSocket:', error);
      setStatus('error');
    }
  }, [url, startHeartbeat, reconnectAttempts, maxReconnectAttempts, calculateReconnectDelay]);

  const disconnect = useCallback(() => {
    shouldReconnectRef.current = false;
    clearHeartbeat();
    clearReconnectTimeout();

    if (socket) {
      socket.close();
      setSocket(null);
    }

    setStatus('disconnected');
    setReconnectAttempts(0);
  }, [socket, clearHeartbeat, clearReconnectTimeout]);

  const sendMessage = useCallback((type: string, data?: any): boolean => {
    if (socket && socket.readyState === WebSocket.OPEN) {
      try {
        socket.send(JSON.stringify({ type, data }));
        return true;
      } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        return false;
      }
    }
    return false;
  }, [socket]);

  // ‚úÖ CORRE√á√ÉO: useEffect para autoConnect sem depend√™ncias problem√°ticas
  useEffect(() => {
    if (autoConnect && url && url !== '') {
      connect();
    }

    return () => {
      disconnect();
    };
  }, [autoConnect, url]); // ‚úÖ REMOVIDO: connect e disconnect das depend√™ncias para evitar loop

  return {
    socket,
    status,
    isConnected: status === 'connected',
    pingLatency,
    reconnectAttempts,
    connect,
    disconnect,
    sendMessage,
  };
}

// =============================================================================
// LOCAL STORAGE HOOK
// =============================================================================
export function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void] {
  // State to store our value
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }

    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Return a wrapped version of useState's setter function that persists the new value to localStorage
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);

      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}

// =============================================================================
// DEBOUNCE HOOK
// =============================================================================
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

// =============================================================================
// ASYNC OPERATION HOOK
// =============================================================================
export function useAsync<T, E = string>(
  asyncFunction: () => Promise<T>,
  immediate = true
) {
  const [status, setStatus] = useState<'idle' | 'pending' | 'success' | 'error'>('idle');
  const [data, setData] = useState<T | null>(null);
  const [error, setError] = useState<E | null>(null);

  const execute = useCallback(async () => {
    setStatus('pending');
    setData(null);
    setError(null);

    try {
      const response = await asyncFunction();
      setData(response);
      setStatus('success');
      return response;
    } catch (error) {
      setError(error as E);
      setStatus('error');
      throw error;
    }
  }, [asyncFunction]);

  useEffect(() => {
    if (immediate) {
      execute();
    }
  }, [execute, immediate]);

  return {
    execute,
    status,
    data,
    error,
    isLoading: status === 'pending',
    isError: status === 'error',
    isSuccess: status === 'success',
    isIdle: status === 'idle',
  };
}

// =============================================================================
// FORM HOOK
// =============================================================================
export function useForm<T extends Record<string, any>>(
  initialValues: T,
  onSubmit: (values: T) => void | Promise<void>
) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [touched, setTouchedState] = useState<Partial<Record<keyof T, boolean>>>({});

  const setValue = useCallback((name: keyof T, value: any) => {
    setValues(prev => ({ ...prev, [name]: value }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  }, [errors]);

  const setError = useCallback((name: keyof T, error: string) => {
    setErrors(prev => ({ ...prev, [name]: error }));
  }, []);

  const setTouched = useCallback((name: keyof T, isTouched = true) => {
    setTouchedState(prev => ({ ...prev, [name]: isTouched }));
  }, []);

  const handleChange = useCallback((name: keyof T) => (
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    setValue(name, event.target.value);
  }, [setValue]);

  const handleSubmit = useCallback(async (event?: React.FormEvent) => {
    if (event) {
      event.preventDefault();
    }

    setIsSubmitting(true);

    try {
      await onSubmit(values);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [values, onSubmit]);

  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouchedState({});
    setIsSubmitting(false);
  }, [initialValues]);

  return {
    values,
    errors,
    touched,
    isSubmitting,
    setValue,
    setError,
    setTouched,
    handleChange,
    handleSubmit,
    reset,
    hasErrors: Object.keys(errors).length > 0,
  };
}

// =============================================================================
// COUNTDOWN HOOK
// =============================================================================
export function useCountdown(initialTime: number) {
  const [timeLeft, setTimeLeft] = useState(initialTime);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const start = useCallback(() => {
    if (!isRunning) {
      setIsRunning(true);
    }
  }, [isRunning]);

  const pause = useCallback(() => {
    setIsRunning(false);
  }, []);

  const reset = useCallback((newTime?: number) => {
    setIsRunning(false);
    setTimeLeft(newTime ?? initialTime);
  }, [initialTime]);

  const stop = useCallback(() => {
    setIsRunning(false);
    setTimeLeft(0);
  }, []);

  useEffect(() => {
    if (isRunning && timeLeft > 0) {
      intervalRef.current = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            setIsRunning(false);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning, timeLeft]);

  const formatTime = useCallback((seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }, []);

  return {
    timeLeft,
    isRunning,
    start,
    pause,
    reset,
    stop,
    formatTime: formatTime(timeLeft),
    isFinished: timeLeft === 0,
  };
}

// =============================================================================
// KEYBOARD HOOK
// =============================================================================
export function useKeyboard(key: string, callback: () => void, deps: any[] = []) {
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.key === key) {
        callback();
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [key, callback, ...deps]);
}

// =============================================================================
// ONLINE STATUS HOOK
// =============================================================================
export function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(
    typeof navigator !== 'undefined' ? navigator.onLine : true
  );

  useEffect(() => {
    const setOnline = () => setIsOnline(true);
    const setOffline = () => setIsOnline(false);

    window.addEventListener('online', setOnline);
    window.addEventListener('offline', setOffline);

    return () => {
      window.removeEventListener('online', setOnline);
      window.removeEventListener('offline', setOffline);
    };
  }, []);

  return isOnline;
}

// =============================================================================
// COPY TO CLIPBOARD HOOK
// =============================================================================
export function useCopyToClipboard() {
  const [copiedText, setCopiedText] = useState<string | null>(null);

  const copy = useCallback(async (text: string) => {
    if (!navigator?.clipboard) {
      console.warn('Clipboard not supported');
      return false;
    }

    try {
      await navigator.clipboard.writeText(text);
      setCopiedText(text);
      toast.success('Copiado para a √°rea de transfer√™ncia!');

      // Clear copied text after 3 seconds
      setTimeout(() => setCopiedText(null), 3000);

      return true;
    } catch (error) {
      console.warn('Copy failed', error);
      toast.error('Falha ao copiar');
      setCopiedText(null);
      return false;
    }
  }, []);

  return { copy, copiedText };
}

// =============================================================================
// INTERSECTION OBSERVER HOOK
// =============================================================================
export function useIntersectionObserver(
  elementRef: React.RefObject<Element>,
  options?: IntersectionObserverInit
) {
  const [isIntersecting, setIsIntersecting] = useState(false);

  useEffect(() => {
    const element = elementRef.current;
    if (!element) return;

    const observer = new IntersectionObserver(
      ([entry]) => setIsIntersecting(entry.isIntersecting),
      options
    );

    observer.observe(element);
    return () => observer.unobserve(element);
  }, [elementRef, options]);

  return isIntersecting;
}

// =============================================================================
// PREVIOUS VALUE HOOK
// =============================================================================
export function usePrevious<T>(value: T): T | undefined {
  const ref = useRef<T>();

  useEffect(() => {
    ref.current = value;
  }, [value]);

  return ref.current;
}

// =============================================================================
// WINDOW SIZE HOOK
// =============================================================================
export function useWindowSize() {
  const [windowSize, setWindowSize] = useState<{
    width: number | undefined;
    height: number | undefined;
  }>({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Set initial size

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowSize;
}

// =============================================================================
// ROUTE PROTECTION HOOK
// =============================================================================
export function useProtectedRoute(redirectTo = '/auth/login') {
  const router = useRouter();

  // This would typically use your auth context
  // For now, just a placeholder
  const isAuthenticated = false; // Replace with actual auth check

  useEffect(() => {
    if (!isAuthenticated) {
      router.push(redirectTo);
    }
  }, [isAuthenticated, router, redirectTo]);

  return isAuthenticated;
}
</file>

<file path="src/pages/_app.tsx">
// üê∫ LOBISOMEM ONLINE - Next.js App Component
// Global app configuration and providers

import type { AppProps } from 'next/app';
import Head from 'next/head';
import { Inter, Cinzel, Pirata_One } from 'next/font/google';
import { Toaster } from 'react-hot-toast';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter } from 'next/router';
import { useEffect } from 'react';

// Context Providers
import { AuthProvider } from '@/context/AuthContext';
import { SocketProvider } from '@/context/SocketContext';
import { ThemeProvider } from '@/context/ThemeContext';

// Components
import ErrorBoundary from '@/components/common/ErrorBoundary';
import { PageLoading } from '@/components/common/LoadingSpinner';

// Styles
import '@/styles/globals.css';

// =============================================================================
// FONT CONFIGURATION
// =============================================================================
const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
});

const cinzel = Cinzel({
  subsets: ['latin'],
  variable: '--font-cinzel',
  display: 'swap',
});

const pirataOne = Pirata_One({
  weight: '400',
  subsets: ['latin'],
  variable: '--font-pirata',
  display: 'swap',
});

// =============================================================================
// PAGE TRANSITION VARIANTS
// =============================================================================
const pageVariants = {
  initial: {
    opacity: 0,
    y: 20,
  },
  in: {
    opacity: 1,
    y: 0,
  },
  out: {
    opacity: 0,
    y: -20,
  },
};

const pageTransition = {
  type: 'tween',
  ease: 'anticipate',
  duration: 0.3,
};

// =============================================================================
// MAIN APP COMPONENT
// =============================================================================
export default function App({ Component, pageProps, router }: AppProps) {
  const { pathname } = useRouter();

  // ‚úÖ ADICIONADO: Suprimir warnings de hydration em desenvolvimento
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      const originalError = console.error;
      console.error = (...args) => {
        if (args[0]?.includes?.('Hydration')) return;
        if (args[0]?.includes?.('Text content does not match')) return;
        originalError(...args);
      };
    }
  }, []);

  return (
    <>
      {/* HEAD com viewport no lugar correto */}
      <Head>
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no, viewport-fit=cover" />
      </Head>

      <ErrorBoundary>
        {/* Font variables */}
        <div className={`${inter.variable} ${cinzel.variable} ${pirataOne.variable}`}>

          {/* ‚úÖ CORRIGIDO: Ordem correta de Context Providers */}
          <ThemeProvider>
            <AuthProvider>
              <SocketProvider> {/* SocketProvider DEVE vir AP√ìS AuthProvider */}

                {/* Page Transitions */}
                <AnimatePresence mode="wait" initial={false}>
                  <motion.div
                    key={router.route}
                    initial="initial"
                    animate="in"
                    exit="out"
                    variants={pageVariants}
                    transition={pageTransition}
                  >
                    <Component {...pageProps} />
                  </motion.div>
                </AnimatePresence>

                {/* Global Toast Notifications */}
                <Toaster
                  position="top-right"
                  toastOptions={{
                    duration: 4000,
                    style: {
                      background: '#2D1B1E',
                      color: '#F4E4BC',
                      border: '1px solid #8B925A',
                      fontFamily: 'var(--font-inter)',
                    },
                    success: {
                      iconTheme: {
                        primary: '#228B22',
                        secondary: '#F4E4BC',
                      },
                    },
                    error: {
                      iconTheme: {
                        primary: '#8B0000',
                        secondary: '#F4E4BC',
                      },
                    },
                  }}
                />

                {/* Loading Overlay for Page Transitions */}
                <AnimatePresence>
                  {router.isFallback && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      exit={{ opacity: 0 }}
                      className="fixed inset-0 z-50"
                    >
                      <PageLoading />
                    </motion.div>
                  )}
                </AnimatePresence>

              </SocketProvider>
            </AuthProvider>
          </ThemeProvider>
        </div>
      </ErrorBoundary>
    </>
  );
}

// =============================================================================
// GLOBAL ERROR HANDLER
// =============================================================================
if (typeof window !== 'undefined') {
  // Handle global errors
  window.addEventListener('error', (event) => {
    // ‚úÖ MELHORADO: Filtrar erros de hydration
    if (event.error?.message?.includes?.('Hydration')) return;
    if (event.error?.message?.includes?.('Text content does not match')) return;

    console.error('Global error:', event.error);
    // You could send this to an error reporting service
  });

  // Handle unhandled promise rejections
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    // You could send this to an error reporting service
  });

  // Performance monitoring
  if (process.env.NODE_ENV === 'development') {
    // Log performance metrics in development
    window.addEventListener('load', () => {
      setTimeout(() => {
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        console.log('üöÄ Page Load Performance:', {
          'DNS Lookup': navigation.domainLookupEnd - navigation.domainLookupStart,
          'TCP Connection': navigation.connectEnd - navigation.connectStart,
          'Request': navigation.responseStart - navigation.requestStart,
          'Response': navigation.responseEnd - navigation.responseStart,
          'DOM Processing': navigation.domComplete - navigation.domLoading,
          'Total Load Time': navigation.loadEventEnd - navigation.navigationStart,
        });
      }, 0);
    });
  }
}
</file>

<file path="src/pages/_document.tsx">
// üê∫ WEREWOLF - Next.js Document
// Custom HTML document structure

import { Html, Head, Main, NextScript } from 'next/document';

export default function Document() {
  return (
    <Html lang="pt-BR" className="dark"> {/* ‚úÖ ADICIONADO: lang="pt-BR" */}
      <Head>
        {/* Favicon and App Icons */}
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#8B925A" />
        <meta name="msapplication-TileColor" content="#2D1B1E" />
        <meta name="theme-color" content="#2D1B1E" />

        {/* ‚úÖ MELHORADO: Meta Tags mais completas */}
        <meta name="description" content="Werewolf - O cl√°ssico jogo de dedu√ß√£o social online. Entre na vila e descubra quem s√£o os lobisomens!" />
        <meta name="keywords" content="werewolf, lobisomem, jogo online, multiplayer, dedu√ß√£o social, mafia" />
        <meta name="author" content="Werewolf Team" />
        <meta name="robots" content="index, follow" />

        {/* ‚úÖ ADICIONADO: Meta tags para PWA */}
        <meta name="format-detection" content="telephone=no" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        <meta name="apple-mobile-web-app-title" content="Werewolf" />

        {/* Open Graph / Facebook */}
        <meta property="og:type" content="website" />
        <meta property="og:title" content="Werewolf - O Jogo de Dedu√ß√£o Social" />
        <meta property="og:description" content="O cl√°ssico jogo de dedu√ß√£o social online. Descubra quem s√£o os lobisomens antes que eliminem toda a vila!" />
        <meta property="og:image" content="/og-image.png" />
        <meta property="og:url" content="https://werewolf-game.com" />
        <meta property="og:site_name" content="Werewolf" />
        <meta property="og:locale" content="pt_BR" />

        {/* Twitter */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="Werewolf - O Jogo de Dedu√ß√£o Social" />
        <meta name="twitter:description" content="O cl√°ssico jogo de dedu√ß√£o social online. Descubra quem s√£o os lobisomens!" />
        <meta name="twitter:image" content="/og-image.png" />

        {/* DNS Prefetch for performance */}
        <link rel="dns-prefetch" href="//fonts.googleapis.com" />
        <link rel="dns-prefetch" href="//fonts.gstatic.com" />

        {/* Preconnect for critical resources */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />

        {/* Google Fonts - Medieval theme */}
        <link
          href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700&family=Pirata+One&family=Inter:wght@300;400;500;600;700&display=swap"
          rel="stylesheet"
        />

        {/* ‚úÖ MELHORADO: Critical CSS mais robusto */}
        <style>{`
          /* Prevent Flash of Unstyled Content */
          html {
            visibility: hidden;
            opacity: 0;
            scroll-behavior: smooth;
          }
          
          html.fonts-loaded {
            visibility: visible;
            opacity: 1;
          }

          /* Loading state */
          .page-loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #2D1B1E 0%, #1a1a2e 100%);
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
          }

          /* Dark theme by default */
          body {
            background-color: #2D1B1E;
            color: #F4E4BC;
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }

          /* ‚úÖ MELHORADO: Custom scrollbar mais bonito */
          ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
          }

          ::-webkit-scrollbar-track {
            background: rgba(45, 27, 30, 0.1);
            border-radius: 4px;
          }

          ::-webkit-scrollbar-thumb {
            background: rgba(139, 146, 90, 0.5);
            border-radius: 4px;
            transition: background 0.2s ease;
          }

          ::-webkit-scrollbar-thumb:hover {
            background: rgba(139, 146, 90, 0.8);
          }

          ::-webkit-scrollbar-corner {
            background: transparent;
          }

          /* Firefox scrollbar */
          * {
            scrollbar-width: thin;
            scrollbar-color: rgba(139, 146, 90, 0.5) rgba(45, 27, 30, 0.1);
          }

          /* Disable text selection on UI elements */
          button, .btn, .no-select {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
          }

          /* ‚úÖ MELHORADO: Focus visible para acessibilidade */
          .focus-visible,
          *:focus-visible {
            outline: 2px solid #8B925A;
            outline-offset: 2px;
            border-radius: 4px;
          }

          /* ‚úÖ ADICIONADO: Supress√£o de hydration warnings no console */
          .hydration-safe {
            opacity: 0;
          }

          .hydration-safe.hydrated {
            opacity: 1;
            transition: opacity 0.2s ease;
          }

          /* ‚úÖ ADICIONADO: Anima√ß√µes de entrada suaves */
          @keyframes fadeInUp {
            from {
              opacity: 0;
              transform: translateY(20px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }

          .fade-in-up {
            animation: fadeInUp 0.5s ease forwards;
          }

          /* ‚úÖ ADICIONADO: Preven√ß√£o de layout shift */
          .prevent-layout-shift {
            min-height: 1px;
          }

          /* ‚úÖ ADICIONADO: Estilos para loading states */
          .skeleton {
            background: linear-gradient(90deg, #2D1B1E 25%, #3D2B2E 50%, #2D1B1E 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
          }

          @keyframes loading {
            0% {
              background-position: 200% 0;
            }
            100% {
              background-position: -200% 0;
            }
          }

          /* ‚úÖ ADICIONADO: Estilos para modo high contrast */
          @media (prefers-contrast: high) {
            body {
              background-color: #000;
              color: #fff;
            }
          }

          /* ‚úÖ ADICIONADO: Estilos para reduced motion */
          @media (prefers-reduced-motion: reduce) {
            *,
            *::before,
            *::after {
              animation-duration: 0.01ms !important;
              animation-iteration-count: 1 !important;
              transition-duration: 0.01ms !important;
            }
          }
        `}</style>
      </Head>

      <body>
        {/* Page loading overlay */}
        <div id="page-loading" className="page-loading">
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>üê∫</div>
            <div style={{ fontSize: '1.5rem', fontFamily: 'Cinzel, serif', color: '#8B925A' }}>
              Werewolf
            </div>
            <div style={{ fontSize: '0.9rem', color: '#F4E4BC', marginTop: '0.5rem' }}>
              Carregando...
            </div>
          </div>
        </div>

        <Main />
        <NextScript />

        {/* ‚úÖ MELHORADO: Scripts de inicializa√ß√£o mais robustos */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              document.addEventListener('DOMContentLoaded', function() {
                // Remove loading overlay with smooth transition
                const loading = document.getElementById('page-loading');
                if (loading) {
                  setTimeout(() => {
                    loading.style.opacity = '0';
                    loading.style.transition = 'opacity 0.3s ease';
                    setTimeout(() => {
                      loading.remove();
                    }, 300);
                  }, 800);
                }

                // Mark fonts as loaded
                document.documentElement.classList.add('fonts-loaded');

                // Initialize focus-visible polyfill
                try {
                  let hadKeyboardEvent = true;
                  let keyboardThrottleTimeout;

                  const detectKeyboard = function(e) {
                    if (e.metaKey || e.altKey || e.ctrlKey) return;
                    hadKeyboardEvent = true;
                    document.body.classList.add('using-keyboard');
                  };

                  const detectMouse = function() {
                    hadKeyboardEvent = false;
                    document.body.classList.remove('using-keyboard');
                  };

                  document.addEventListener('keydown', detectKeyboard, true);
                  document.addEventListener('mousedown', detectMouse, true);
                  document.addEventListener('pointerdown', detectMouse, true);
                  document.addEventListener('touchstart', detectMouse, true);
                } catch (e) {
                  console.warn('Focus-visible polyfill error:', e);
                }

                // Performance monitoring in development
                if (${process.env.NODE_ENV === 'development'}) {
                  window.addEventListener('load', function() {
                    setTimeout(() => {
                      try {
                        const navigation = performance.getEntriesByType('navigation')[0];
                        if (navigation) {
                          console.log('üìä Page Performance:', {
                            'Total Load Time': Math.round(navigation.loadEventEnd - navigation.navigationStart) + 'ms',
                            'DOM Content Loaded': Math.round(navigation.domContentLoadedEventEnd - navigation.navigationStart) + 'ms',
                            'First Paint': Math.round(performance.getEntriesByType('paint')[0]?.startTime || 0) + 'ms'
                          });
                        }
                      } catch (e) {
                        console.warn('Performance monitoring error:', e);
                      }
                    }, 1000);
                  });
                }

                // Global error handling
                window.addEventListener('error', function(e) {
                  // Filter out hydration warnings in development
                  if (e.error?.message?.includes?.('Hydration') || 
                      e.error?.message?.includes?.('Text content does not match')) {
                    return;
                  }
                  console.error('Global error:', e.error);
                });

                window.addEventListener('unhandledrejection', function(e) {
                  console.error('Unhandled promise rejection:', e.reason);
                });
              });
            `,
          }}
        />

        {/* NoScript fallback */}
        <noscript>
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundColor: '#2D1B1E',
            color: '#F4E4BC',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column',
            fontFamily: 'sans-serif',
            textAlign: 'center',
            zIndex: 9999,
          }}>
            <div style={{ fontSize: '4rem', marginBottom: '2rem' }}>üê∫</div>
            <h1 style={{ fontSize: '2rem', marginBottom: '1rem', fontFamily: 'Cinzel, serif' }}>Werewolf</h1>
            <p style={{ fontSize: '1.2rem', marginBottom: '2rem', maxWidth: '400px' }}>
              JavaScript √© necess√°rio para jogar este jogo online.
            </p>
            <p style={{ fontSize: '1rem', color: '#8B925A' }}>
              Por favor, ative o JavaScript no seu navegador e recarregue a p√°gina.
            </p>
          </div>
        </noscript>
      </body>
    </Html>
  );
}
</file>

<file path="src/pages/auth/forgot-password.tsx">
// üê∫ WEREWOLF - Forgot Password Page
// Werewolf inspired password recovery interface

import { useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Mail, ArrowLeft, Send, CheckCircle } from 'lucide-react';

import { useForm } from '@/hooks';
import { authService } from '@/services/auth';
import Layout from '@/components/common/Layout';
import Button from '@/components/common/Button';

// =============================================================================
// FORGOT PASSWORD PAGE COMPONENT
// =============================================================================
export default function ForgotPasswordPage() {
  const router = useRouter();
  const [emailSent, setEmailSent] = useState(false);

  // Form management
  const {
    values,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleSubmit,
    setError,
    setTouched,
  } = useForm<{ email: string }>(
    { email: '' },
    async (formData) => {
      // Validate email
      if (!formData.email) {
        setError('email', 'Email √© obrigat√≥rio');
        return;
      }

      if (!authService.validateEmail(formData.email)) {
        setError('email', 'Email inv√°lido');
        return;
      }

      try {
        const response = await authService.forgotPassword(formData.email);
        if (response.success) {
          setEmailSent(true);
        } else {
          setError('email', response.error || 'Erro ao enviar email');
        }
      } catch (error) {
        setError('email', 'Erro de conex√£o. Tente novamente.');
      }
    }
  );

  if (emailSent) {
    return <EmailSentSuccess email={values.email} />;
  }

  return (
    <>
      <Head>
        <title>Esqueci Minha Senha - Werewolf</title>
        <meta name="description" content="Recupere sua senha do Werewolf" />
      </Head>

      <Layout variant="auth">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="card-medieval p-8"
        >
          {/* Back Button */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="mb-6"
          >
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.back()}
              className="text-white/70 hover:text-white"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Voltar
            </Button>
          </motion.div>

          {/* Header */}
          <div className="text-center mb-8">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2, type: 'spring' }}
              className="text-6xl mb-4"
            >
              üîë
            </motion.div>
            <h1 className="text-2xl font-medieval text-glow mb-2">
              Esqueceu sua Senha?
            </h1>
            <p className="text-white/70 leading-relaxed">
              N√£o se preocupe! Digite seu email e enviaremos
              instru√ß√µes para redefinir sua senha.
            </p>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Email Field */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Email da Conta
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="email"
                  type="email"
                  value={values.email}
                  onChange={handleChange('email')}
                  onBlur={() => setTouched('email')}
                  className={`
                    w-full pl-10 pr-4 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.email && touched.email
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="seu@email.com"
                  disabled={isSubmitting}
                  autoFocus
                />
              </div>
              {errors.email && touched.email && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.email}
                </motion.p>
              )}
            </div>

            {/* Submit Button */}
            <Button
              type="submit"
              variant="medieval"
              size="lg"
              disabled={isSubmitting}
              loading={isSubmitting}
              className="w-full"
            >
              <Send className="w-5 h-5 mr-2" />
              {isSubmitting ? 'Enviando...' : 'Enviar Instru√ß√µes'}
            </Button>
          </form>

          {/* Additional Info */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
            className="mt-8 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg"
          >
            <h3 className="text-sm font-semibold text-blue-300 mb-2">
              üí° Dica
            </h3>
            <p className="text-xs text-blue-200/70">
              Verifique sua caixa de spam se n√£o receber o email em alguns minutos.
              O email de recupera√ß√£o ser√° enviado de noreply@werewolf.com
            </p>
          </motion.div>

          {/* Back to Login */}
          <div className="mt-8 text-center">
            <p className="text-white/50 text-sm mb-4">
              Lembrou da sua senha?
            </p>
            <Link
              href="/auth/login"
              className="text-salem-400 hover:text-salem-300 transition-colors text-sm font-medium"
            >
              Voltar para o Login
            </Link>
          </div>
        </motion.div>
      </Layout>
    </>
  );
}

// =============================================================================
// EMAIL SENT SUCCESS COMPONENT
// =============================================================================
interface EmailSentSuccessProps {
  email: string;
}

function EmailSentSuccess({ email }: EmailSentSuccessProps) {
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Email Enviado - Werewolf</title>
      </Head>

      <Layout variant="auth">
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          className="card-medieval p-8 text-center"
        >
          {/* Success Icon */}
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.2, type: 'spring', bounce: 0.6 }}
            className="text-6xl mb-6"
          >
            üìß
          </motion.div>

          {/* Success Message */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="mb-8"
          >
            <div className="flex items-center justify-center mb-4">
              <CheckCircle className="w-8 h-8 text-green-400 mr-3" />
              <h1 className="text-2xl font-medieval text-glow">
                Email Enviado!
              </h1>
            </div>

            <p className="text-white/70 leading-relaxed mb-4">
              Enviamos instru√ß√µes de recupera√ß√£o de senha para:
            </p>

            <div className="bg-medieval-800/50 border border-medieval-600 rounded-lg p-3 mb-6">
              <span className="font-mono text-salem-300">{email}</span>
            </div>

            <p className="text-white/60 text-sm">
              Siga as instru√ß√µes no email para redefinir sua senha.
              O link √© v√°lido por 1 hora.
            </p>
          </motion.div>

          {/* Action Buttons */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="space-y-4"
          >
            <Button
              variant="medieval"
              size="lg"
              onClick={() => router.push('/auth/login')}
              className="w-full"
            >
              Voltar ao Login
            </Button>

            <Button
              variant="ghost"
              onClick={() => router.push('/auth/forgot-password')}
              className="w-full text-sm"
            >
              N√£o recebeu o email? Tentar novamente
            </Button>
          </motion.div>

          {/* Additional Help */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 1 }}
            className="mt-8 p-4 bg-amber-900/20 border border-amber-500/30 rounded-lg"
          >
            <h3 className="text-sm font-semibold text-amber-300 mb-2">
              ‚ö†Ô∏è N√£o recebeu o email?
            </h3>
            <ul className="text-xs text-amber-200/70 text-left space-y-1">
              <li>‚Ä¢ Verifique sua caixa de spam</li>
              <li>‚Ä¢ Confirme se o email est√° correto</li>
              <li>‚Ä¢ Aguarde alguns minutos</li>
              <li>‚Ä¢ Tente novamente se necess√°rio</li>
            </ul>
          </motion.div>
        </motion.div>
      </Layout>
    </>
  );
}
</file>

<file path="src/pages/auth/login.tsx">
// üê∫ WEREWOLF - Login Page
// Werewolf inspired login interface

import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Eye, EyeOff, Mail, Lock, LogIn, AlertCircle } from 'lucide-react';
import { toast } from 'react-hot-toast';

import { useAuth } from '@/context/AuthContext';
import { useTheme } from '@/context/ThemeContext';
import { useForm } from '@/hooks';
import { LoginRequest } from '@/types';
import Layout from '@/components/common/Layout';
import Button from '@/components/common/Button';
import LoadingSpinner from '@/components/common/LoadingSpinner';

// =============================================================================
// LOGIN PAGE COMPONENT
// =============================================================================
export default function LoginPage() {
  const router = useRouter();
  const { login, isAuthenticated, isLoading } = useAuth();
  const { playSound } = useTheme();
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Form management
  const {
    values,
    errors,
    touched,
    handleChange,
    handleSubmit,
    setError: setFieldError,
    setTouched,
  } = useForm<LoginRequest>(
    {
      email: '',
      password: '',
    },
    async (formData) => {
      if (!validateForm(formData)) return;

      setIsSubmitting(true);
      setError('');

      await login(formData);
      setIsSubmitting(false);
    }
  );

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      const redirectTo = router.query.redirect as string || '/lobby';
      router.push(redirectTo);
    }
  }, [isAuthenticated, isLoading, router]);

  // Form validation
  const validateForm = (data: LoginRequest): boolean => {
    let isValid = true;
    setError('');

    // Email validation
    if (!data.email) {
      setFieldError('email', 'Email √© obrigat√≥rio');
      isValid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
      setFieldError('email', 'Email inv√°lido');
      isValid = false;
    }

    // Password validation
    if (!data.password) {
      setFieldError('password', 'Senha √© obrigat√≥ria');
      isValid = false;
    } else if (data.password.length < 6) {
      setFieldError('password', 'Senha deve ter pelo menos 6 caracteres');
      isValid = false;
    }

    return isValid;
  };

  // Show loading if checking authentication
  if (isLoading) {
    return <LoadingSpinner variant="medieval" size="xl" text="Verificando autentica√ß√£o..." />;
  }

  return (
    <>
      <Head>
        <title>Login - Werewolf</title>
        <meta name="description" content="Fa√ßa login na sua conta do Werewolf" />
      </Head>

      <Layout variant="auth">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="card-medieval p-8"
        >
          {/* Header */}
          <div className="text-center mb-8">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2, type: 'spring' }}
              className="text-6xl mb-4"
            >
              üê∫
            </motion.div>
            <h1 className="text-2xl font-medieval text-glow mb-2">
              Entrar na Vila
            </h1>
            <p className="text-white/70">
              Fa√ßa login para come√ßar a jogar
            </p>
          </div>

          {/* Display de erro geral */}
          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-6 p-4 bg-red-900/30 border border-red-500/50 rounded-lg flex items-center gap-3"
            >
              <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0" />
              <p className="text-red-300 text-sm">{error}</p>
            </motion.div>
          )}

          {/* Google Login Button */}
          <Button
            variant="ghost"
            size="lg"
            onClick={() => {
              playSound('button_click');
              console.log('Google login clicked');
              // TODO: Implementar login com Google
            }}
            className="w-full border border-white/20 hover:border-white/40 mb-6"
            disabled={isSubmitting}
          >
            <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
              />
              <path
                fill="currentColor"
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
              />
              <path
                fill="currentColor"
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
              />
              <path
                fill="currentColor"
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
              />
            </svg>
            Continuar com Google
          </Button>

          {/* Divider */}
          <div className="my-6 flex items-center">
            <div className="flex-1 border-t border-medieval-600"></div>
            <span className="px-4 text-white/50 text-sm">ou</span>
            <div className="flex-1 border-t border-medieval-600"></div>
          </div>

          {/* Login Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Email Field */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Email
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="email"
                  type="email"
                  value={values.email}
                  onChange={handleChange('email')}
                  onBlur={() => setTouched('email')}
                  className={`
                    w-full pl-10 pr-4 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.email && touched.email
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="seu@email.com"
                  disabled={isSubmitting}
                />
              </div>
              {errors.email && touched.email && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.email}
                </motion.p>
              )}
            </div>

            {/* Password Field */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Senha
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={values.password}
                  onChange={handleChange('password')}
                  onBlur={() => setTouched('password')}
                  className={`
                    w-full pl-10 pr-12 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.password && touched.password
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  disabled={isSubmitting}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-white/40 hover:text-white/70 transition-colors"
                  disabled={isSubmitting}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
              {errors.password && touched.password && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.password}
                </motion.p>
              )}
            </div>

            {/* Forgot Password Link */}
            <div className="text-right">
              <Link
                href="/auth/forgot-password"
                className="text-sm text-salem-400 hover:text-salem-300 transition-colors"
              >
                Esqueceu sua senha?
              </Link>
            </div>

            {/* Submit Button */}
            <Button
              type="submit"
              variant="medieval"
              size="lg"
              disabled={isSubmitting}
              loading={isSubmitting}
              className="w-full"
            >
              <LogIn className="w-5 h-5 mr-2" />
              {isSubmitting ? 'Entrando...' : 'Entrar'}
            </Button>
          </form>

          {/* Register Link */}
          <div className="text-center mt-8">
            <p className="text-white/70 mb-4">
              Ainda n√£o tem uma conta?
            </p>
            <Button
              variant="ghost"
              onClick={() => router.push('/auth/register')}
              className="w-full"
              disabled={isSubmitting}
            >
              Criar Conta Gratuita
            </Button>
          </div>

          {/* Demo Credentials */}
          {process.env.NODE_ENV === 'development' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 1 }}
              className="mt-8 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg"
            >
              <h4 className="text-sm font-semibold text-blue-300 mb-2">
                üß™ Modo Desenvolvimento
              </h4>
              <p className="text-xs text-blue-200/70 mb-2">
                Credenciais de teste:
              </p>
              <div className="text-xs font-mono text-blue-200">
                <div>Email: demo@werewolf.com</div>
                <div>Senha: demo123</div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="mt-2 text-xs"
                onClick={() => {
                  handleChange('email')({ target: { value: 'demo@werewolf.com' } } as any);
                  handleChange('password')({ target: { value: 'demo123' } } as any);
                }}
                disabled={isSubmitting}
              >
                Preencher Automaticamente
              </Button>
            </motion.div>
          )}
        </motion.div>

        {/* Background Elements */}
        <div className="fixed inset-0 overflow-hidden pointer-events-none z-[-1]">
          {[...Array(3)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute text-8xl opacity-5"
              style={{
                top: `${20 + i * 30}%`,
                left: `${10 + i * 30}%`,
              }}
              animate={{
                y: [0, -20, 0],
                rotate: [0, 5, -5, 0],
              }}
              transition={{
                duration: 6 + i * 2,
                repeat: Infinity,
                ease: 'easeInOut',
              }}
            >
              üê∫
            </motion.div>
          ))}
        </div>
      </Layout>
    </>
  );
}
</file>

<file path="src/pages/auth/register.tsx">
// üê∫ WEREWOLF - Register Page
// Werewolf inspired registration interface

import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Eye, EyeOff, Mail, Lock, User, UserPlus, Check, X } from 'lucide-react';

import { useAuth } from '@/context/AuthContext';
import { useForm, useDebounce } from '@/hooks';
import { RegisterRequest } from '@/types';
import { authService } from '@/services/auth';
import Layout from '@/components/common/Layout';
import Button from '@/components/common/Button';
import LoadingSpinner from '@/components/common/LoadingSpinner';

// =============================================================================
// REGISTER PAGE COMPONENT
// =============================================================================
export default function RegisterPage() {
  const router = useRouter();
  const { register, isAuthenticated, isLoading } = useAuth();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);
  const [emailAvailable, setEmailAvailable] = useState<boolean | null>(null);
  const [checkingUsername, setCheckingUsername] = useState(false);
  const [checkingEmail, setCheckingEmail] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Form management
  const {
    values,
    errors,
    touched,
    handleChange,
    handleSubmit,
    setError,
    setTouched,
  } = useForm<RegisterRequest>(
    {
      email: '',
      username: '',
      password: '',
      confirmPassword: '',
    },
    async (formData) => {
      if (!validateForm(formData)) return;

      setIsSubmitting(true);
      await register(formData);
      setIsSubmitting(false);
    }
  );

  // Debounced values for availability checking
  const debouncedUsername = useDebounce(values.username, 500);
  const debouncedEmail = useDebounce(values.email, 500);

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      router.push('/lobby');
    }
  }, [isAuthenticated, isLoading, router]);

  // Check username availability
  useEffect(() => {
    if (debouncedUsername && debouncedUsername.length >= 3) {
      checkUsernameAvailability(debouncedUsername);
    } else {
      setUsernameAvailable(null);
    }
  }, [debouncedUsername]);

  // Check email availability
  useEffect(() => {
    if (debouncedEmail && authService.validateEmail(debouncedEmail)) {
      checkEmailAvailability(debouncedEmail);
    } else {
      setEmailAvailable(null);
    }
  }, [debouncedEmail]);

  // Username availability check
  const checkUsernameAvailability = async (username: string) => {
    setCheckingUsername(true);
    try {
      const response = await authService.checkUsernameAvailability(username);
      setUsernameAvailable(response.data?.available || false);
    } catch (error) {
      setUsernameAvailable(null);
    } finally {
      setCheckingUsername(false);
    }
  };

  // Email availability check
  const checkEmailAvailability = async (email: string) => {
    setCheckingEmail(true);
    try {
      const response = await authService.checkEmailAvailability(email);
      setEmailAvailable(response.data?.available || false);
    } catch (error) {
      setEmailAvailable(null);
    } finally {
      setCheckingEmail(false);
    }
  };

  // Form validation
  const validateForm = (data: RegisterRequest): boolean => {
    let isValid = true;

    // Email validation
    if (!data.email) {
      setError('email', 'Email √© obrigat√≥rio');
      isValid = false;
    } else if (!authService.validateEmail(data.email)) {
      setError('email', 'Email inv√°lido');
      isValid = false;
    } else if (emailAvailable === false) {
      setError('email', 'Este email j√° est√° em uso');
      isValid = false;
    }

    // Username validation
    const usernameValidation = authService.validateUsername(data.username);
    if (!usernameValidation.isValid) {
      setError('username', usernameValidation.errors[0]);
      isValid = false;
    } else if (usernameAvailable === false) {
      setError('username', 'Este username j√° est√° em uso');
      isValid = false;
    }

    // Password validation
    const passwordValidation = authService.validatePassword(data.password);
    if (!passwordValidation.isValid) {
      setError('password', passwordValidation.errors[0]);
      isValid = false;
    }

    // Confirm password validation
    if (data.password !== data.confirmPassword) {
      setError('confirmPassword', 'Senhas n√£o coincidem');
      isValid = false;
    }

    return isValid;
  };

  // Get field status icon
  const getFieldStatusIcon = (field: 'username' | 'email') => {
    const isChecking = field === 'username' ? checkingUsername : checkingEmail;
    const isAvailable = field === 'username' ? usernameAvailable : emailAvailable;
    const value = field === 'username' ? values.username : values.email;

    if (!value || (field === 'username' && value.length < 3)) return null;
    if (isChecking) return <LoadingSpinner size="sm" />;
    if (isAvailable === true) return <Check className="w-5 h-5 text-green-400" />;
    if (isAvailable === false) return <X className="w-5 h-5 text-red-400" />;
    return null;
  };

  // Show loading if checking authentication
  if (isLoading) {
    return <LoadingSpinner variant="medieval" size="xl" text="Verificando autentica√ß√£o..." />;
  }

  return (
    <>
      <Head>
        <title>Criar Conta - Werewolf</title>
        <meta name="description" content="Crie sua conta no Werewolf e entre na vila" />
      </Head>

      <Layout variant="auth">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="card-medieval p-8"
        >
          {/* Header */}
          <div className="text-center mb-8">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2, type: 'spring' }}
              className="text-6xl mb-4"
            >
              üèòÔ∏è
            </motion.div>
            <h1 className="text-2xl font-medieval text-glow mb-2">
              Juntar-se √† Vila
            </h1>
            <p className="text-white/70">
              Crie sua conta para come√ßar a jogar
            </p>
          </div>

          {/* Google Register Button */}
          <Button
            variant="ghost"
            size="lg"
            onClick={() => {
              console.log('Google register clicked');
              // TODO: Implementar registro com Google
            }}
            className="w-full border border-white/20 hover:border-white/40 mb-6"
            disabled={isSubmitting}
          >
            <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
              />
              <path
                fill="currentColor"
                d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
              />
              <path
                fill="currentColor"
                d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
              />
              <path
                fill="currentColor"
                d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
              />
            </svg>
            Criar conta com Google
          </Button>

          {/* Divider */}
          <div className="my-6 flex items-center">
            <div className="flex-1 border-t border-medieval-600"></div>
            <span className="px-4 text-white/50 text-sm">ou</span>
            <div className="flex-1 border-t border-medieval-600"></div>
          </div>

          {/* Register Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Email Field */}
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Email
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="email"
                  type="email"
                  value={values.email}
                  onChange={handleChange('email')}
                  onBlur={() => setTouched('email')}
                  className={`
                    w-full pl-10 pr-12 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.email && touched.email
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="seu@email.com"
                  disabled={isSubmitting}
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  {getFieldStatusIcon('email')}
                </div>
              </div>
              {errors.email && touched.email && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.email}
                </motion.p>
              )}
            </div>

            {/* Username Field */}
            <div>
              <label
                htmlFor="username"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Nome de Usu√°rio
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <User className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="username"
                  type="text"
                  value={values.username}
                  onChange={handleChange('username')}
                  onBlur={() => setTouched('username')}
                  className={`
                    w-full pl-10 pr-12 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.username && touched.username
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="seunome123"
                  disabled={isSubmitting}
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                  {getFieldStatusIcon('username')}
                </div>
              </div>
              <p className="mt-1 text-xs text-white/50">
                3-20 caracteres, apenas letras, n√∫meros, _ e -
              </p>
              {errors.username && touched.username && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.username}
                </motion.p>
              )}
            </div>

            {/* Password Field */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Senha
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={values.password}
                  onChange={handleChange('password')}
                  onBlur={() => setTouched('password')}
                  className={`
                    w-full pl-10 pr-12 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.password && touched.password
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  disabled={isSubmitting}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-white/40 hover:text-white/70 transition-colors"
                  disabled={isSubmitting}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>

              {/* Password Requirements */}
              <div className="mt-2 space-y-1">
                <PasswordRequirement
                  met={values.password.length >= 6}
                  text="Pelo menos 6 caracteres"
                />
                <PasswordRequirement
                  met={/(?=.*[a-z])/.test(values.password)}
                  text="Uma letra min√∫scula"
                />
                <PasswordRequirement
                  met={/(?=.*[A-Z])/.test(values.password)}
                  text="Uma letra mai√∫scula"
                />
                <PasswordRequirement
                  met={/(?=.*\d)/.test(values.password)}
                  text="Um n√∫mero"
                />
              </div>

              {errors.password && touched.password && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.password}
                </motion.p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div>
              <label
                htmlFor="confirmPassword"
                className="block text-sm font-medium text-white/90 mb-2"
              >
                Confirmar Senha
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-white/40" />
                </div>
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  value={values.confirmPassword}
                  onChange={handleChange('confirmPassword')}
                  onBlur={() => setTouched('confirmPassword')}
                  className={`
                    w-full pl-10 pr-12 py-3 bg-medieval-800/50 border rounded-lg
                    text-white placeholder-white/50 transition-colors
                    focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent
                    ${errors.confirmPassword && touched.confirmPassword
                      ? 'border-red-500 focus:ring-red-500'
                      : 'border-medieval-600 hover:border-salem-500'
                    }
                  `}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  disabled={isSubmitting}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-white/40 hover:text-white/70 transition-colors"
                  disabled={isSubmitting}
                >
                  {showConfirmPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
              {errors.confirmPassword && touched.confirmPassword && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-2 text-sm text-red-400"
                >
                  {errors.confirmPassword}
                </motion.p>
              )}
            </div>

            {/* Submit Button */}
            <Button
              type="submit"
              variant="medieval"
              size="lg"
              disabled={isSubmitting || usernameAvailable === false || emailAvailable === false}
              loading={isSubmitting}
              className="w-full"
            >
              <UserPlus className="w-5 h-5 mr-2" />
              {isSubmitting ? 'Criando conta...' : 'Criar Conta'}
            </Button>
          </form>

          {/* Login Link */}
          <div className="text-center mt-8">
            <p className="text-white/70 mb-4">
              J√° tem uma conta?
            </p>
            <Button
              variant="ghost"
              onClick={() => router.push('/auth/login')}
              className="w-full"
              disabled={isSubmitting}
            >
              Fazer Login
            </Button>
          </div>
        </motion.div>
      </Layout>
    </>
  );
}

// =============================================================================
// PASSWORD REQUIREMENT COMPONENT
// =============================================================================
interface PasswordRequirementProps {
  met: boolean;
  text: string;
}

function PasswordRequirement({ met, text }: PasswordRequirementProps) {
  return (
    <motion.div
      initial={{ opacity: 0, x: -10 }}
      animate={{ opacity: 1, x: 0 }}
      className="flex items-center text-xs"
    >
      {met ? (
        <Check className="w-3 h-3 text-green-400 mr-2" />
      ) : (
        <X className="w-3 h-3 text-red-400 mr-2" />
      )}
      <span className={met ? 'text-green-400' : 'text-red-400'}>
        {text}
      </span>
    </motion.div>
  );
}
</file>

<file path="src/pages/index.tsx">
import { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'react-hot-toast';

export interface WebSocketHookOptions {
  autoConnect?: boolean;
  heartbeatInterval?: number;
  maxReconnectAttempts?: number;
  reconnectBackoff?: 'linear' | 'exponential';
}

export interface UseWebSocketReturn {
  socket: WebSocket | null;
  status: 'disconnected' | 'connecting' | 'connected' | 'reconnecting' | 'error';
  isConnected: boolean;
  pingLatency: number;
  reconnectAttempts: number;
  connect: (url: string) => void;
  disconnect: () => void;
  sendMessage: (type: string, data?: any) => boolean;
}

export function useWebSocket(options: WebSocketHookOptions = {}): UseWebSocketReturn {
  const {
    heartbeatInterval = 30000,
    maxReconnectAttempts = 5,
    reconnectBackoff = 'exponential'
  } = options;

  const [socket, setSocket] = useState<WebSocket | null>(null);
  const [status, setStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'reconnecting' | 'error'>('disconnected');
  const [pingLatency, setPingLatency] = useState<number>(0);
  const [reconnectAttempts, setReconnectAttempts] = useState<number>(0);

  const socketRef = useRef<WebSocket | null>(null);
  const heartbeatRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const pingStartTimeRef = useRef<number>(0);
  const shouldReconnectRef = useRef<boolean>(true);
  const currentUrlRef = useRef<string>('');

  const clearHeartbeat = useCallback(() => {
    if (heartbeatRef.current) {
      clearInterval(heartbeatRef.current);
      heartbeatRef.current = null;
    }
  }, []);

  const clearReconnectTimeout = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
  }, []);

  const startHeartbeat = useCallback(() => {
    clearHeartbeat();

    heartbeatRef.current = setInterval(() => {
      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
        pingStartTimeRef.current = Date.now();
        socketRef.current.send(JSON.stringify({ type: 'ping' }));
      }
    }, heartbeatInterval);
  }, [heartbeatInterval, clearHeartbeat]);

  const calculateReconnectDelay = useCallback((attempts: number) => {
    if (reconnectBackoff === 'linear') {
      return Math.min(1000 * attempts, 30000);
    } else {
      return Math.min(1000 * Math.pow(2, attempts), 30000);
    }
  }, [reconnectBackoff]);

  const disconnect = useCallback(() => {
    shouldReconnectRef.current = false;
    clearHeartbeat();
    clearReconnectTimeout();

    if (socketRef.current) {
      socketRef.current.close(1000, 'User disconnected');
      socketRef.current = null;
    }

    setSocket(null);
    setStatus('disconnected');
    setReconnectAttempts(0);
    currentUrlRef.current = '';
  }, [clearHeartbeat, clearReconnectTimeout]);

  const connect = useCallback((url: string) => {
    if (!url || url.includes('undefined')) {
      console.error("WebSocket connect: Invalid URL:", url);
      setStatus('disconnected');
      return;
    }

    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      if (currentUrlRef.current === url) {
        console.log('WebSocket already connected to same URL');
        return;
      }
      disconnect();
    }

    currentUrlRef.current = url;
    setStatus('connecting');
    shouldReconnectRef.current = true;

    try {
      console.log('Connecting to WebSocket:', url);
      const ws = new WebSocket(url);
      socketRef.current = ws;
      setSocket(ws);

      ws.onopen = () => {
        console.log('WebSocket conectado');
        setStatus('connected');
        setReconnectAttempts(0);
        startHeartbeat();
      };

      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);

          if (message.type === 'ping') {
            ws.send(JSON.stringify({ type: 'pong' }));
          }

          if (message.type === 'pong') {
            const latency = Date.now() - pingStartTimeRef.current;
            setPingLatency(latency);
          }

          window.dispatchEvent(new CustomEvent('websocket-message', { detail: message }));
        } catch (error) {
          console.error('Erro ao processar mensagem WebSocket:', error);
        }
      };

      ws.onclose = (event) => {
        console.log('WebSocket fechado:', event.code, event.reason);
        socketRef.current = null;
        setSocket(null);
        clearHeartbeat();

        if (shouldReconnectRef.current &&
          reconnectAttempts < maxReconnectAttempts &&
          currentUrlRef.current &&
          !currentUrlRef.current.includes('undefined')) {
          setStatus('reconnecting');
          const delay = calculateReconnectDelay(reconnectAttempts);

          reconnectTimeoutRef.current = setTimeout(() => {
            setReconnectAttempts(prev => prev + 1);
            connect(currentUrlRef.current);
          }, delay);
        } else {
          setStatus('disconnected');
          shouldReconnectRef.current = false;
        }
      };

      ws.onerror = (error) => {
        console.error("WebSocket error:", error);
        setStatus('error');

        if (currentUrlRef.current && currentUrlRef.current.includes('undefined')) {
          shouldReconnectRef.current = false;
        }
      };

    } catch (error) {
      console.error('Erro ao criar WebSocket:', error);
      setStatus('error');
    }
  }, [disconnect, startHeartbeat, reconnectAttempts, maxReconnectAttempts, calculateReconnectDelay, clearHeartbeat]);

  const sendMessage = useCallback((type: string, data?: any): boolean => {
    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      try {
        socketRef.current.send(JSON.stringify({ type, data }));
        return true;
      } catch (error) {
        console.error('Erro ao enviar mensagem:', error);
        return false;
      }
    }
    return false;
  }, []);

  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  return {
    socket,
    status,
    isConnected: status === 'connected',
    pingLatency,
    reconnectAttempts,
    connect,
    disconnect,
    sendMessage,
  };
}

export function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((val: T) => T)) => void] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }

    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);

      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

export function useAsync<T, E = string>(
  asyncFunction: () => Promise<T>,
  immediate = true
) {
  const [status, setStatus] = useState<'idle' | 'pending' | 'success' | 'error'>('idle');
  const [data, setData] = useState<T | null>(null);
  const [error, setError] = useState<E | null>(null);

  const execute = useCallback(async () => {
    setStatus('pending');
    setData(null);
    setError(null);

    try {
      const response = await asyncFunction();
      setData(response);
      setStatus('success');
      return response;
    } catch (error) {
      setError(error as E);
      setStatus('error');
      throw error;
    }
  }, [asyncFunction]);

  useEffect(() => {
    if (immediate) {
      execute();
    }
  }, [execute, immediate]);

  return {
    execute,
    status,
    data,
    error,
    isLoading: status === 'pending',
    isError: status === 'error',
    isSuccess: status === 'success',
    isIdle: status === 'idle',
  };
}

export function useForm<T extends Record<string, any>>(
  initialValues: T,
  onSubmit: (values: T) => void | Promise<void>
) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [touched, setTouchedState] = useState<Partial<Record<keyof T, boolean>>>({});

  const setValue = useCallback((name: keyof T, value: any) => {
    setValues(prev => ({ ...prev, [name]: value }));

    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  }, [errors]);

  const setError = useCallback((name: keyof T, error: string) => {
    setErrors(prev => ({ ...prev, [name]: error }));
  }, []);

  const setTouched = useCallback((name: keyof T, isTouched = true) => {
    setTouchedState(prev => ({ ...prev, [name]: isTouched }));
  }, []);

  const handleChange = useCallback((name: keyof T) => (
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    setValue(name, event.target.value);
  }, [setValue]);

  const handleSubmit = useCallback(async (event?: React.FormEvent) => {
    if (event) {
      event.preventDefault();
    }

    setIsSubmitting(true);

    try {
      await onSubmit(values);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [values, onSubmit]);

  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouchedState({});
    setIsSubmitting(false);
  }, [initialValues]);

  return {
    values,
    errors,
    touched,
    isSubmitting,
    setValue,
    setError,
    setTouched,
    handleChange,
    handleSubmit,
    reset,
    hasErrors: Object.keys(errors).length > 0,
  };
}

export function useCountdown(initialTime: number) {
  const [timeLeft, setTimeLeft] = useState(initialTime);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const start = useCallback(() => {
    if (!isRunning) {
      setIsRunning(true);
    }
  }, [isRunning]);

  const pause = useCallback(() => {
    setIsRunning(false);
  }, []);

  const reset = useCallback((newTime?: number) => {
    setIsRunning(false);
    setTimeLeft(newTime ?? initialTime);
  }, [initialTime]);

  const stop = useCallback(() => {
    setIsRunning(false);
    setTimeLeft(0);
  }, []);

  useEffect(() => {
    if (isRunning && timeLeft > 0) {
      intervalRef.current = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            setIsRunning(false);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning, timeLeft]);

  const formatTime = useCallback((seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }, []);

  return {
    timeLeft,
    isRunning,
    start,
    pause,
    reset,
    stop,
    formatTime: formatTime(timeLeft),
    isFinished: timeLeft === 0,
  };
}

export function useKeyboard(key: string, callback: () => void, deps: any[] = []) {
  useEffect(() => {
    const handleKeyPress = (event: KeyboardEvent) => {
      if (event.key === key) {
        callback();
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [key, callback, ...deps]);
}

export function useOnlineStatus() {
  const [isOnline, setIsOnline] = useState(
    typeof navigator !== 'undefined' ? navigator.onLine : true
  );

  useEffect(() => {
    const setOnline = () => setIsOnline(true);
    const setOffline = () => setIsOnline(false);

    window.addEventListener('online', setOnline);
    window.addEventListener('offline', setOffline);

    return () => {
      window.removeEventListener('online', setOnline);
      window.removeEventListener('offline', setOffline);
    };
  }, []);

  return isOnline;
}

export function useCopyToClipboard() {
  const [copiedText, setCopiedText] = useState<string | null>(null);

  const copy = useCallback(async (text: string) => {
    if (!navigator?.clipboard) {
      console.warn('Clipboard not supported');
      return false;
    }

    try {
      await navigator.clipboard.writeText(text);
      setCopiedText(text);
      toast.success('Copiado para a √°rea de transfer√™ncia!');

      setTimeout(() => setCopiedText(null), 3000);

      return true;
    } catch (error) {
      console.warn('Copy failed', error);
      toast.error('Falha ao copiar');
      setCopiedText(null);
      return false;
    }
  }, []);

  return { copy, copiedText };
}

export function useIntersectionObserver(
  elementRef: React.RefObject<Element>,
  options?: IntersectionObserverInit
) {
  const [isIntersecting, setIsIntersecting] = useState(false);

  useEffect(() => {
    const element = elementRef.current;
    if (!element) return;

    const observer = new IntersectionObserver(
      ([entry]) => setIsIntersecting(entry.isIntersecting),
      options
    );

    observer.observe(element);
    return () => observer.unobserve(element);
  }, [elementRef, options]);

  return isIntersecting;
}

export function usePrevious<T>(value: T): T | undefined {
  const ref = useRef<T>();

  useEffect(() => {
    ref.current = value;
  }, [value]);

  return ref.current;
}

export function useWindowSize() {
  const [windowSize, setWindowSize] = useState<{
    width: number | undefined;
    height: number | undefined;
  }>({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowSize;
}

export function useProtectedRoute(redirectTo = '/auth/login') {
  const router = useRouter();
  const isAuthenticated = false;

  useEffect(() => {
    if (!isAuthenticated) {
      router.push(redirectTo);
    }
  }, [isAuthenticated, router, redirectTo]);

  return isAuthenticated;
}
</file>

<file path="src/pages/lobby.tsx">
// üê∫ LOBISOMEM ONLINE - Lobby Page (VERS√ÉO FINAL CORRITA)

import { useState, useEffect, useCallback } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';

import { useAuth } from '@/context/AuthContext';
import { useSocket } from '@/context/SocketContext';
import { useTheme } from '@/context/ThemeContext';
import Layout from '@/components/common/Layout';
import Button from '@/components/common/Button';
import LoadingSpinner from '@/components/common/LoadingSpinner';

// ‚úÖ IMPORTAR APENAS OS MODAIS REAIS
import CreateRoomModal from '@/components/lobby/CreateRoomModal';
import JoinRoomModal from '@/components/lobby/JoinRoomModal';

// =============================================================================
// ‚úÖ COMPONENTE SEGURO PARA N√öMEROS (RESOLVE HYDRATION ERROR)
// =============================================================================
interface SafeNumberDisplayProps {
  value: number;
  className?: string;
}

function SafeNumberDisplay({ value, className = "" }: SafeNumberDisplayProps) {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <span className={className}>{value}</span>;
  }

  return (
    <span className={className}>
      {value.toLocaleString('pt-BR')}
    </span>
  );
}

// =============================================================================
// √çCONES INLINE
// =============================================================================
const PlusIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
  </svg>
);

const SearchIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
  </svg>
);

const RefreshIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
  </svg>
);

const UsersIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
);

const EyeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const PlayIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M9 10v4a4 4 0 008 0v-4M9 10V9a4 4 0 118 0v1M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
  </svg>
);

const ClockIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const HashIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
  </svg>
);

// =============================================================================
// TYPES
// =============================================================================
interface MockRoom {
  id: string;
  name: string;
  currentPlayers: number;
  maxPlayers: number;
  currentSpectators: number;
  maxSpectators: number;
  status: 'WAITING' | 'PLAYING' | 'FINISHED';
  isPrivate: boolean;
  hostUsername: string;
  createdAt: string;
}

// =============================================================================
// LOBBY PAGE COMPONENT
// =============================================================================
function LobbyPage() {
  const router = useRouter();
  const { user, isAuthenticated, isLoading: isAuthLoading } = useAuth();
  const { isConnected } = useSocket();
  const { playSound, playMusic, stopMusic } = useTheme();

  // State
  const [rooms, setRooms] = useState<MockRoom[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'ALL' | 'WAITING' | 'PLAYING'>('ALL');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showJoinCodeModal, setShowJoinCodeModal] = useState(false);

  // ‚úÖ CORRE√á√ÉO: Estado para evitar m√∫ltiplas chamadas de m√∫sica
  const [musicStarted, setMusicStarted] = useState(false);

  // ‚úÖ PROTE√á√ÉO DE ROTA
  useEffect(() => {
    if (!isAuthLoading && !isAuthenticated) {
      router.push('/auth/login');
      return;
    }
  }, [isAuthLoading, isAuthenticated, router]);

  // ‚úÖ CORRE√á√ÉO: Iniciar m√∫sica com preven√ß√£o de m√∫ltiplas execu√ß√µes
  useEffect(() => {
    if (!isAuthLoading && isAuthenticated && !musicStarted) {
      console.log('üéµ Iniciando m√∫sica do lobby...');
      const musicOptions = ['medieval_tavern01', 'medieval_tavern02', 'medieval_tavern03'];
      const randomMusic = musicOptions[Math.floor(Math.random() * musicOptions.length)];
      playMusic(randomMusic);
      setMusicStarted(true);
    }
  }, [isAuthLoading, isAuthenticated, musicStarted]); // ‚úÖ REMOVIDO: playMusic das depend√™ncias

  // ‚úÖ ADICIONADO: Cleanup quando sair da p√°gina
  useEffect(() => {
    return () => {
      if (musicStarted) {
        console.log('üéµ Parando m√∫sica do lobby...');
        stopMusic();
      }
    };
  }, [musicStarted]);

  // Gerar salas mock
  useEffect(() => {
    if (isAuthLoading || !isAuthenticated) return;

    const generateMockRooms = (): MockRoom[] => {
      const mockNames = [
        'Vila Misteriosa', 'Lobos da Madrugada', 'Cidade Sombria',
        'Noite Eterna', 'Ca√ßadores de Lobos', 'Vila Assombrada',
        'Lua Cheia', 'Territ√≥rio Selvagem', 'Ref√∫gio Seguro'
      ];

      return Array.from({ length: 12 }, (_, i) => ({
        id: `room-${i + 1}`,
        name: mockNames[i] || `Sala ${i + 1}`,
        currentPlayers: Math.floor(Math.random() * 12) + 3,
        maxPlayers: 15,
        currentSpectators: Math.floor(Math.random() * 3),
        maxSpectators: 5,
        status: (['WAITING', 'PLAYING', 'WAITING'] as const)[Math.floor(Math.random() * 3)],
        isPrivate: Math.random() > 0.7,
        hostUsername: `Player${Math.floor(Math.random() * 1000)}`,
        createdAt: new Date(Date.now() - Math.random() * 3600000).toISOString(),
      }));
    };

    setTimeout(() => {
      setRooms(generateMockRooms());
      setLoading(false);
    }, 1000);
  }, [isAuthLoading, isAuthenticated]);

  // Filter rooms
  const filteredRooms = rooms.filter(room => {
    const matchesSearch = room.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      room.hostUsername.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'ALL' || room.status === filterStatus;
    return matchesSearch && matchesFilter && !room.isPrivate;
  });

  // Handlers
  const handleJoinRoom = useCallback((roomId: string) => {
    console.log('üö™ Joining room:', roomId);
    playSound('button_click');
    router.push(`/room/${roomId}`);
  }, [router, playSound]);

  const handleSpectateRoom = useCallback((roomId: string) => {
    console.log('üëÅÔ∏è Spectating room:', roomId);
    playSound('button_click');
    router.push(`/room/${roomId}?spectate=true`);
  }, [router, playSound]);

  const handleCreateRoom = useCallback(() => {
    console.log('üèóÔ∏è Opening create room modal');
    playSound('button_click');
    setShowCreateModal(true);
  }, [playSound]);

  const handleJoinByCode = useCallback(() => {
    console.log('üîë Opening join by code modal');
    playSound('button_click');
    setShowJoinCodeModal(true);
  }, [playSound]);

  const handleRefresh = useCallback(() => {
    console.log('üîÑ Refreshing room list');
    playSound('button_click');
    setLoading(true);
    setTimeout(() => {
      window.location.reload();
    }, 500);
  }, [playSound]);

  // Loading state
  if (isAuthLoading) {
    return (
      <>
        <Head>
          <title>Lobby - Lobisomem Online</title>
        </Head>
        <Layout>
          <div className="flex justify-center items-center min-h-[50vh]">
            <LoadingSpinner
              variant="medieval"
              size="xl"
              text="Verificando autentica√ß√£o..."
            />
          </div>
        </Layout>
      </>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Lobby - Werewolf</title>
        <meta name="description" content="Encontre e participe de partidas de Werewolf" />
      </Head>

      <Layout>
        <div className="space-y-6">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4"
          >
            <div>
              <h1 className="text-3xl font-medieval text-glow">
                üèòÔ∏è Lobby Principal
              </h1>
              <p className="text-white/70 mt-2">
                Bem-vindo de volta, {user?.username || 'Jogador'}! Encontre uma partida ou crie sua pr√≥pria sala.
              </p>
            </div>

            {/* Connection Status */}
            <div className="flex items-center gap-3">
              <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm ${isConnected
                ? 'bg-green-900/30 text-green-300 border border-green-500/30'
                : 'bg-red-900/30 text-red-300 border border-red-500/30'
                }`}>
                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`} />
                {isConnected ? 'Online' : 'Desconectado'}
              </div>
            </div>
          </motion.div>

          {/* Action Buttons */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="flex flex-wrap gap-3"
          >
            <Button
              variant="medieval"
              size="lg"
              onClick={handleCreateRoom}
              className="flex-1 min-w-[200px]"
            >
              <PlusIcon />
              <span>Criar Sala</span>
            </Button>

            <Button
              variant="secondary"
              size="lg"
              onClick={handleJoinByCode}
              className="flex-1 min-w-[200px]"
            >
              <HashIcon />
              <span>Entrar por C√≥digo</span>
            </Button>

            <Button
              variant="ghost"
              size="lg"
              onClick={handleRefresh}
              disabled={loading}
            >
              <RefreshIcon />
            </Button>
          </motion.div>

          {/* Search and Filters */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="flex flex-col sm:flex-row gap-4"
          >
            {/* Search */}
            <div className="flex-1 relative">
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <SearchIcon />
              </div>
              <input
                type="text"
                placeholder="Buscar salas..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 bg-medieval-800/50 border border-medieval-600 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-salem-400 focus:border-transparent"
              />
            </div>

            {/* Filter */}
            <div className="flex gap-2">
              {(['ALL', 'WAITING', 'PLAYING'] as const).map((filter) => (
                <Button
                  key={filter}
                  variant={filterStatus === filter ? 'primary' : 'ghost'}
                  size="md"
                  onClick={() => setFilterStatus(filter)}
                >
                  {filter === 'ALL' ? 'Todas' : filter === 'WAITING' ? 'Aguardando' : 'Em Jogo'}
                </Button>
              ))}
            </div>
          </motion.div>

          {/* Rooms List */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            {loading ? (
              <div className="flex justify-center py-12">
                <LoadingSpinner variant="medieval" size="lg" text="Carregando salas..." />
              </div>
            ) : (
              <div className="grid gap-4">
                {filteredRooms.length > 0 ? (
                  filteredRooms.map((room, index) => (
                    <RoomCard
                      key={room.id}
                      room={room}
                      onJoin={() => handleJoinRoom(room.id)}
                      onSpectate={() => handleSpectateRoom(room.id)}
                      delay={index * 0.05}
                    />
                  ))
                ) : (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="text-center py-12 text-white/60"
                  >
                    <div className="text-6xl mb-4">üèöÔ∏è</div>
                    <h3 className="text-xl font-semibold mb-2">Nenhuma sala encontrada</h3>
                    <p>Tente ajustar os filtros ou criar uma nova sala.</p>
                  </motion.div>
                )}
              </div>
            )}
          </motion.div>
        </div>

        {/* ‚úÖ APENAS OS MODAIS REAIS - SEM Modal GEN√âRICO */}
        <CreateRoomModal
          isOpen={showCreateModal}
          onClose={() => setShowCreateModal(false)}
        />

        <JoinRoomModal
          isOpen={showJoinCodeModal}
          onClose={() => setShowJoinCodeModal(false)}
        />
      </Layout>
    </>
  );
}

// =============================================================================
// ROOM CARD COMPONENT
// =============================================================================
interface RoomCardProps {
  room: MockRoom;
  onJoin: () => void;
  onSpectate: () => void;
  delay?: number;
}

function RoomCard({ room, onJoin, onSpectate, delay = 0 }: RoomCardProps) {
  const canJoin = room.status === 'WAITING' && room.currentPlayers < room.maxPlayers;
  const canSpectate = room.currentSpectators < room.maxSpectators;

  const getStatusColor = () => {
    switch (room.status) {
      case 'WAITING': return 'text-green-400 bg-green-900/30 border-green-500/30';
      case 'PLAYING': return 'text-yellow-400 bg-yellow-900/30 border-yellow-500/30';
      case 'FINISHED': return 'text-gray-400 bg-gray-900/30 border-gray-500/30';
    }
  };

  const getStatusText = () => {
    switch (room.status) {
      case 'WAITING': return 'Aguardando';
      case 'PLAYING': return 'Em Jogo';
      case 'FINISHED': return 'Finalizada';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay }}
      whileHover={{ scale: 1.02 }}
      className="bg-medieval-800/30 border border-medieval-600 rounded-lg p-4 hover:border-salem-500/50 transition-all"
    >
      <div className="flex items-center justify-between">
        <div className="flex-1 min-w-0">
          {/* Room Info */}
          <div className="flex items-center gap-3 mb-2">
            <h3 className="font-semibold text-white truncate">{room.name}</h3>

            {room.isPrivate && (
              <span className="text-yellow-400">üîí</span>
            )}

            <div className={`px-2 py-1 rounded text-xs border ${getStatusColor()}`}>
              {getStatusText()}
            </div>
          </div>

          {/* Room Details */}
          <div className="flex items-center flex-wrap gap-x-4 gap-y-1 text-sm text-white/70">
            <div className="flex items-center gap-1">
              <UsersIcon />
              <span>
                <SafeNumberDisplay value={room.currentPlayers} />
                /
                <SafeNumberDisplay value={room.maxPlayers} />
              </span>
            </div>

            <div className="flex items-center gap-1">
              <EyeIcon />
              <span>
                <SafeNumberDisplay value={room.currentSpectators} />
                /
                <SafeNumberDisplay value={room.maxSpectators} />
              </span>
            </div>

            <div className="flex items-center gap-1">
              <span>Host: {room.hostUsername}</span>
            </div>

            <div className="flex items-center gap-1">
              <ClockIcon />
              <span>{new Date(room.createdAt).toLocaleTimeString()}</span>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2 ml-4">
          {canSpectate && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onSpectate}
            >
              <EyeIcon />
            </Button>
          )}

          <Button
            variant={canJoin ? 'primary' : 'secondary'}
            size="sm"
            onClick={onJoin}
            disabled={!canJoin && !canSpectate}
          >
            <PlayIcon />
            <span>
              {canJoin ? 'Entrar' : room.status === 'PLAYING' ? 'Assistir' : 'Lotada'}
            </span>
          </Button>
        </div>
      </div>
    </motion.div>
  );
}

export default LobbyPage;
</file>

<file path="src/pages/room/[id].tsx">
import { useRouter } from 'next/router';
import Head from 'next/head';
import { withAuth } from '@/context/AuthContext';
import WaitingRoom from '@/components/room/WaitingRoom';
import { PageLoading } from '@/components/common/LoadingSpinner'; // Importar um componente de loading

function RoomPage() {
  const router = useRouter();

  // ‚úÖ PASSO 1: Obter o roomId de router.query
  const { id: roomId } = router.query;

  // ‚úÖ PASSO 2: Adicionar um guarda de renderiza√ß√£o
  // Se o router n√£o estiver pronto (isReady=false) ou se o roomId n√£o for uma string v√°lida,
  // mostramos uma tela de carregamento em vez de tentar renderizar o WaitingRoom com dados inv√°lidos.
  if (!router.isReady || !roomId || typeof roomId !== 'string') {
    return (
      <>
        <Head>
          <title>Carregando Sala... - Lobisomem Online</title>
        </Head>
        <PageLoading />
      </>
    );
  }

  // ‚úÖ PASSO 3: Se chegamos aqui, temos um roomId v√°lido e podemos renderizar a sala.
  // O componente WaitingRoom agora tem a garantia de receber uma string como roomId.
  return (
    <>
      <Head>
        <title>Sala de Espera - Lobisomem Online</title>
        <meta name="description" content="Sala de espera do jogo Lobisomem" />
      </Head>
      <WaitingRoom roomId={roomId} />
    </>
  );
}

// O HOC withAuth continua o mesmo
export default withAuth(RoomPage);
</file>

<file path="src/services/api.ts">
// üê∫ LOBISOMEM ONLINE - API Service
// Axios configuration and HTTP client

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { toast } from 'react-hot-toast';
import Cookies from 'js-cookie';
import { ApiResponse } from '@/types';

// =============================================================================
// API CONFIGURATION
// =============================================================================
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

// Create axios instance
const api: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000, // ‚úÖ AUMENTADO: timeout de 10s para 15s
  headers: {
    'Content-Type': 'application/json',
  },
});

// =============================================================================
// ‚úÖ MELHORADO: REQUEST INTERCEPTOR
// =============================================================================
api.interceptors.request.use(
  (config) => {
    // ‚úÖ CORRIGIDO: Usar Cookies em vez de localStorage para consist√™ncia
    const token = Cookies.get('access_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // Add request timestamp
    config.headers['X-Request-Time'] = new Date().toISOString();

    // ‚úÖ ADICIONADO: Request ID para debugging
    config.headers['X-Request-ID'] = Math.random().toString(36).substr(2, 9);

    // Log request in development
    if (process.env.NODE_ENV === 'development') {
      console.log(`üåê API Request: ${config.method?.toUpperCase()} ${config.url}`, {
        headers: config.headers,
        data: config.data
      });
    }

    return config;
  },
  (error) => {
    console.error('‚ùå Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// =============================================================================
// ‚úÖ MELHORADO: RESPONSE INTERCEPTOR COM REFRESH TOKEN
// =============================================================================
api.interceptors.response.use(
  (response: AxiosResponse) => {
    // Log response in development
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`, {
        data: response.data,
        headers: response.headers
      });
    }

    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // ‚úÖ MELHORADO: Handle specific error codes with better UX
    if (error.response) {
      const { status, data } = error.response;

      switch (status) {
        case 401:
          // Unauthorized - try to refresh token
          if (!originalRequest._retry) {
            originalRequest._retry = true;

            try {
              const refreshToken = Cookies.get('refresh_token');
              if (refreshToken) {
                console.log('üîÑ Attempting token refresh...');

                // ‚úÖ CORRIGIDO: Usar a pr√≥pria inst√¢ncia do axios para refresh
                const refreshResponse = await api.post('/auth/refresh', {
                  refreshToken,
                }, {
                  // ‚úÖ IMPORTANTE: N√£o usar interceptors no refresh para evitar loop
                  headers: {
                    'Authorization': `Bearer ${refreshToken}`,
                  },
                  // Bypass interceptors
                  _retry: true
                } as any);

                if (refreshResponse.data.success) {
                  const { accessToken } = refreshResponse.data.data;

                  // ‚úÖ CORRIGIDO: Usar Cookies consistentemente
                  Cookies.set('access_token', accessToken, {
                    expires: 7,
                    secure: process.env.NODE_ENV === 'production',
                    sameSite: 'strict'
                  });

                  // Retry original request with new token
                  originalRequest.headers.Authorization = `Bearer ${accessToken}`;
                  console.log('‚úÖ Token refreshed successfully, retrying request...');
                  return api(originalRequest);
                }
              }
            } catch (refreshError) {
              console.error('‚ùå Token refresh failed:', refreshError);
            }

            // If refresh fails, redirect to login
            console.log('üîí Authentication failed, redirecting to login...');
            Cookies.remove('access_token');
            Cookies.remove('refresh_token');

            // ‚úÖ CORRE√á√ÉO: Usar Next.js router em vez de window.location.href
            if (typeof window !== 'undefined' && !window.location.pathname.includes('/auth/')) {
              toast.error('Sess√£o expirada. Fa√ßa login novamente.');

              // ‚úÖ CORRE√á√ÉO: Importar o router do Next.js dinamicamente
              const { default: Router } = await import('next/router');
              setTimeout(() => {
                Router.push('/auth/login');
              }, 1500);
            }
          }
          break;

        case 403:
          toast.error('Voc√™ n√£o tem permiss√£o para esta a√ß√£o');
          break;

        case 404:
          // ‚úÖ MELHORADO: N√£o mostrar toast para todos os 404s
          if (!originalRequest.url?.includes('/api/')) {
            toast.error('Recurso n√£o encontrado');
          }
          break;

        case 409:
          // Conflict - usually validation errors
          const conflictMessage = data?.error || data?.message || 'Conflito de dados';
          toast.error(conflictMessage);
          break;

        case 422:
          // Validation errors
          const validationMessage = data?.error || data?.message || 'Dados inv√°lidos';
          toast.error(validationMessage);
          break;

        case 429:
          toast.error('Muitas tentativas. Tente novamente mais tarde.');
          break;

        case 500:
          toast.error('Erro interno do servidor. Tente novamente.');
          break;

        case 502:
        case 503:
        case 504:
          toast.error('Servidor temporariamente indispon√≠vel. Tente novamente.');
          break;

        default:
          // ‚úÖ MELHORADO: Mostrar mensagem do servidor se dispon√≠vel
          const errorMessage = data?.error || data?.message || `Erro ${status}`;
          if (status >= 400 && status < 500) {
            toast.error(errorMessage);
          } else {
            toast.error('Erro inesperado. Tente novamente.');
          }
      }
    } else if (error.request) {
      // Network error
      console.error('‚ùå Network error:', error.request);

      // ‚úÖ MELHORADO: Detectar tipo de erro de rede
      if (error.code === 'ECONNABORTED') {
        toast.error('Tempo limite da requisi√ß√£o. Verifique sua conex√£o.');
      } else if (error.code === 'ERR_NETWORK') {
        toast.error('Erro de rede. Verifique sua conex√£o com a internet.');
      } else {
        toast.error('Erro de conex√£o. Verifique sua internet.');
      }
    } else {
      // Something else happened
      console.error('‚ùå API error:', error.message);
      toast.error('Erro inesperado');
    }

    return Promise.reject(error);
  }
);

// =============================================================================
// ‚úÖ MELHORADO: API METHODS CLASS
// =============================================================================
class ApiService {
  // GET request
  async get<T = any>(
    url: string,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await api.get(url, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // POST request
  async post<T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await api.post(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // PUT request
  async put<T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await api.put(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // PATCH request
  async patch<T = any>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await api.patch(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // DELETE request
  async delete<T = any>(
    url: string,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await api.delete(url, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // ‚úÖ MELHORADO: File upload with progress
  async uploadFile<T = any>(
    url: string,
    file: File,
    onProgress?: (progress: number) => void,
    additionalData?: Record<string, any>
  ): Promise<ApiResponse<T>> {
    try {
      const formData = new FormData();
      formData.append('file', file);

      // Add additional data if provided
      if (additionalData) {
        Object.entries(additionalData).forEach(([key, value]) => {
          formData.append(key, value);
        });
      }

      const response = await api.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          if (onProgress && progressEvent.total) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
        timeout: 60000, // 60 seconds for file uploads
      });

      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  }

  // ‚úÖ MELHORADO: Error handler with more context
  private handleError(error: any): ApiResponse {
    if (error.response?.data) {
      return {
        success: false,
        error: error.response.data.error || error.response.data.message || 'Erro da API',
        timestamp: new Date().toISOString(),
        statusCode: error.response.status,
      };
    }

    let errorMessage = 'Erro desconhecido';
    if (error.code === 'ECONNABORTED') {
      errorMessage = 'Tempo limite da requisi√ß√£o';
    } else if (error.code === 'ERR_NETWORK') {
      errorMessage = 'Erro de rede';
    } else if (error.message) {
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage,
      timestamp: new Date().toISOString(),
    };
  }

  // ‚úÖ MELHORADO: Health check with retry
  async healthCheck(): Promise<boolean> {
    try {
      const response = await this.get('/health');
      return response.success;
    } catch {
      return false;
    }
  }

  // Get server info
  async getServerInfo() {
    return this.get('/');
  }

  // ‚úÖ ADICIONADO: Ping method for connection testing
  async ping(): Promise<number> {
    const start = Date.now();
    try {
      await this.get('/ping');
      return Date.now() - start;
    } catch {
      return -1;
    }
  }
}

// =============================================================================
// EXPORT SINGLETON
// =============================================================================
export const apiService = new ApiService();

// =============================================================================
// ‚úÖ MELHORADO: UTILITY FUNCTIONS
// =============================================================================

// Build query string from object
export function buildQueryString(params: Record<string, any>): string {
  const searchParams = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      // Handle arrays
      if (Array.isArray(value)) {
        value.forEach(item => searchParams.append(key, String(item)));
      } else {
        searchParams.append(key, String(value));
      }
    }
  });

  return searchParams.toString();
}

// Create URL with query parameters
export function createUrl(path: string, params?: Record<string, any>): string {
  if (!params) return path;

  const queryString = buildQueryString(params);
  return queryString ? `${path}?${queryString}` : path;
}

// Check if error is network error
export function isNetworkError(error: any): boolean {
  return !error.response && error.request;
}

// Check if error is server error (5xx)
export function isServerError(error: any): boolean {
  return error.response && error.response.status >= 500;
}

// Check if error is client error (4xx)
export function isClientError(error: any): boolean {
  return error.response && error.response.status >= 400 && error.response.status < 500;
}

// ‚úÖ MELHORADO: Retry mechanism with exponential backoff
export async function retryRequest<T>(
  requestFn: () => Promise<T>,
  maxRetries = 3,
  initialDelay = 1000,
  backoffMultiplier = 2
): Promise<T> {
  let lastError: any;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await requestFn();
    } catch (error) {
      lastError = error;

      // Don't retry client errors (4xx) except 408, 429
      if (isClientError(error) && ![408, 429].includes(error.response?.status)) {
        throw error;
      }

      // Don't retry on last attempt
      if (attempt === maxRetries) {
        break;
      }

      // Calculate delay with exponential backoff
      const delay = initialDelay * Math.pow(backoffMultiplier, attempt - 1);
      console.log(`‚è±Ô∏è Retrying request in ${delay}ms (attempt ${attempt}/${maxRetries})`);

      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  throw lastError;
}

// ‚úÖ MELHORADO: Download file with progress
export async function downloadFile(
  url: string,
  filename?: string,
  onProgress?: (progress: number) => void
): Promise<void> {
  try {
    const response = await api.get(url, {
      responseType: 'blob',
      onDownloadProgress: (progressEvent) => {
        if (onProgress && progressEvent.total) {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          onProgress(progress);
        }
      },
    });

    const blob = new Blob([response.data]);
    const downloadUrl = window.URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = filename || 'download';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    window.URL.revokeObjectURL(downloadUrl);
  } catch (error) {
    console.error('Download failed:', error);
    toast.error('Falha no download do arquivo');
  }
}

// ‚úÖ ADICIONADO: Request cancellation utility
export function createCancelToken() {
  const source = axios.CancelToken.source();
  return {
    token: source.token,
    cancel: source.cancel,
  };
}

// ‚úÖ ADICIONADO: Connection monitor
export class ConnectionMonitor {
  private static instance: ConnectionMonitor;
  private isOnline = navigator.onLine;
  private listeners: ((online: boolean) => void)[] = [];

  private constructor() {
    window.addEventListener('online', () => this.updateStatus(true));
    window.addEventListener('offline', () => this.updateStatus(false));
  }

  static getInstance(): ConnectionMonitor {
    if (!ConnectionMonitor.instance) {
      ConnectionMonitor.instance = new ConnectionMonitor();
    }
    return ConnectionMonitor.instance;
  }

  private updateStatus(online: boolean) {
    this.isOnline = online;
    this.listeners.forEach(listener => listener(online));

    if (online) {
      toast.success('Conex√£o restaurada! üåê');
    } else {
      toast.error('Conex√£o perdida. Verificando...', { duration: 6000 });
    }
  }

  onStatusChange(listener: (online: boolean) => void) {
    this.listeners.push(listener);
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  get status() {
    return this.isOnline;
  }
}

export default api;
</file>

<file path="src/services/audioService.ts">
// src/services/audioService.ts
import { Howl, Howler } from 'howler';

// =============================================================================
// TYPES
// =============================================================================
interface AudioServiceConfig {
  sounds: Record<string, string>;
  music: Record<string, string>;
}

// =============================================================================
// AUDIO SERVICE CLASS
// =============================================================================
class AudioService {
  private sounds: Map<string, Howl> = new Map();
  private music: Map<string, Howl> = new Map();
  private currentMusic: Howl | null = null;
  private isUnlocked: boolean = false;
  private pendingMusic: string | null = null;
  private musicVolume: number = 0.5;
  private soundVolume: number = 0.7;

  // =============================================================================
  // INITIALIZE
  // =============================================================================
  initialize(config: AudioServiceConfig) {
    // Verificar se est√° no cliente (browser)
    if (typeof window === 'undefined') {
      console.log('üéÆ AudioService: Ignorando inicializa√ß√£o no servidor (SSR)');
      return;
    }

    console.log('üéÆ Inicializando AudioService...');

    // Carregar sons
    Object.entries(config.sounds).forEach(([id, path]) => {
      const sound = new Howl({
        src: [path],
        volume: this.soundVolume,
        preload: true,
        onload: () => console.log(`‚úÖ Som carregado: ${id}`),
        onloaderror: () => console.error(`‚ùå Erro ao carregar som: ${id}`),
      });
      this.sounds.set(id, sound);
    });

    // Carregar m√∫sicas
    Object.entries(config.music).forEach(([id, path]) => {
      const music = new Howl({
        src: [path],
        volume: this.musicVolume,
        loop: true,
        html5: true, // Importante para arquivos grandes
        preload: true,
        onload: () => console.log(`‚úÖ M√∫sica carregada: ${id}`),
        onloaderror: () => console.error(`‚ùå Erro ao carregar m√∫sica: ${id}`),
      });
      this.music.set(id, music);
    });

    // Tentar desbloquear √°udio em qualquer clique
    this.setupUnlockListeners();
  }

  // =============================================================================
  // SETUP UNLOCK LISTENERS
  // =============================================================================
  private setupUnlockListeners() {
    // Verificar se est√° no cliente
    if (typeof window === 'undefined' || typeof document === 'undefined') {
      return;
    }

    const unlock = async () => {
      if (this.isUnlocked) return;

      console.log('üîì Desbloqueando √°udio...');

      try {
        // Resume Howler context
        if (Howler.ctx && Howler.ctx.state === 'suspended') {
          await Howler.ctx.resume();
          console.log('‚úÖ AudioContext desbloqueado!');
        }

        this.isUnlocked = true;

        // Se tem m√∫sica pendente, toca agora
        if (this.pendingMusic) {
          console.log('üéµ Tocando m√∫sica pendente:', this.pendingMusic);
          this.playMusic(this.pendingMusic);
          this.pendingMusic = null;
        }

        // Remove listeners ap√≥s desbloquear
        document.removeEventListener('click', unlock);
        document.removeEventListener('touchstart', unlock);
      } catch (error) {
        console.error('‚ùå Erro ao desbloquear √°udio:', error);
      }
    };

    // Adiciona listeners para desbloquear no primeiro clique/toque
    document.addEventListener('click', unlock, { once: true });
    document.addEventListener('touchstart', unlock, { once: true });
  }

  // =============================================================================
  // PLAY SOUND
  // =============================================================================
  playSound(soundId: string) {
    const sound = this.sounds.get(soundId);
    if (!sound) {
      console.warn(`‚ö†Ô∏è Som n√£o encontrado: ${soundId}`);
      return;
    }

    if (!this.isUnlocked) {
      console.log('üîí √Åudio ainda bloqueado, som ser√° tocado ap√≥s desbloquear');
      return;
    }

    console.log(`üîä Tocando som: ${soundId}`);
    sound.volume(this.soundVolume);
    sound.play();
  }

  // =============================================================================
  // PLAY MUSIC
  // =============================================================================
  playMusic(musicId: string) {
    console.log(`üéµ Tentando tocar m√∫sica: ${musicId}`);

    if (!this.isUnlocked) {
      console.log('üîí √Åudio bloqueado, m√∫sica ser√° tocada ap√≥s desbloquear');
      this.pendingMusic = musicId;
      return;
    }

    // Para m√∫sica atual
    if (this.currentMusic) {
      console.log('‚èπÔ∏è Parando m√∫sica anterior');
      this.currentMusic.stop();
    }

    const music = this.music.get(musicId);
    if (!music) {
      console.error(`‚ùå M√∫sica n√£o encontrada: ${musicId}`);
      return;
    }

    console.log(`‚ñ∂Ô∏è Iniciando m√∫sica: ${musicId}`);
    music.volume(this.musicVolume);
    music.play();
    this.currentMusic = music;
  }

  // =============================================================================
  // STOP MUSIC
  // =============================================================================
  stopMusic() {
    if (this.currentMusic) {
      console.log('‚èπÔ∏è Parando m√∫sica');
      this.currentMusic.stop();
      this.currentMusic = null;
    }
  }

  // =============================================================================
  // VOLUME CONTROLS
  // =============================================================================
  setMusicVolume(volume: number) {
    this.musicVolume = Math.max(0, Math.min(1, volume));
    if (this.currentMusic) {
      this.currentMusic.volume(this.musicVolume);
    }
  }

  setSoundVolume(volume: number) {
    this.soundVolume = Math.max(0, Math.min(1, volume));
  }

  // =============================================================================
  // GETTERS
  // =============================================================================
  get isMusicPlaying(): boolean {
    return this.currentMusic?.playing() || false;
  }

  get isAudioUnlocked(): boolean {
    return this.isUnlocked;
  }
}

// =============================================================================
// SINGLETON INSTANCE
// =============================================================================
const audioService = new AudioService();

// Inicializar apenas no cliente
if (typeof window !== 'undefined') {
  // Configura√ß√£o com apenas os arquivos que realmente existem
  audioService.initialize({
    sounds: {
      button_click: '/sounds/click3.wav',
      button_secondary: '/sounds/click1.wav',
      button_hover: '/sounds/click2.wav',
    },
    music: {
      medieval_tavern01: '/music/medieval_tavern01.mp3',
      medieval_tavern02: '/music/medieval_tavern02.mp3',
      medieval_tavern03: '/music/medieval_tavern03.mp3',
    }
  });
}

export default audioService;
</file>

<file path="src/services/auth.ts">
// üê∫ LOBISOMEM ONLINE - Authentication Service
// Handle all authentication-related API calls

import { apiService } from './api';
import {
  LoginRequest,
  RegisterRequest,
  AuthResponse,
  User,
  ApiResponse,
  AuthTokens
} from '@/types';

// =============================================================================
// AUTHENTICATION SERVICE
// =============================================================================
class AuthService {

  // =============================================================================
  // ‚úÖ AUTHENTICATION METHODS - CORRIGIDO COM TRATAMENTO DE ERRO ADEQUADO
  // =============================================================================

  /**
   * ‚úÖ CORRIGIDO: Login user with email and password
   * Agora usa axios direto para evitar interceptors que redirecionam em erros 401
   */
  async login(credentials: LoginRequest): Promise<ApiResponse<AuthResponse>> {
    try {
      // ‚úÖ MUDAN√áA: Usar axios direto em vez de apiService para evitar interceptors
      const axios = (await import('axios')).default;
      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

      const response = await axios.post<ApiResponse<AuthResponse>>(
        `${API_BASE_URL}/api/auth/login`,
        credentials,
        {
          headers: { 'Content-Type': 'application/json' },
          timeout: 15000
        }
      );
      return response.data; // Retorna os dados em caso de sucesso (status 2xx)
    } catch (error: any) {
      // Se o status for 4xx ou 5xx, o axios joga um erro. N√≥s o capturamos.
      if (error.response?.data) {
        // Se o erro tem uma resposta do backend, retornamos os dados dessa resposta
        // Ex: { success: false, message: 'Email ou senha incorretos', ... }
        return error.response.data;
      }
      // Se n√£o houver resposta, √© um erro de rede real (servidor offline, etc.)
      return {
        success: false,
        error: 'NETWORK_ERROR',
        message: 'Erro de conex√£o. Tente novamente.',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * ‚úÖ CORRIGIDO: Register new user
   * Agora usa axios direto para evitar interceptors que redirecionam em erros 409
   */
  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {
    try {
      // ‚úÖ MUDAN√áA: Usar axios direto em vez de apiService para evitar interceptors
      const axios = (await import('axios')).default;
      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

      const response = await axios.post<ApiResponse<AuthResponse>>(
        `${API_BASE_URL}/api/auth/register`,
        userData,
        {
          headers: { 'Content-Type': 'application/json' },
          timeout: 15000
        }
      );
      return response.data; // Retorna os dados em caso de sucesso (status 2xx)
    } catch (error: any) {
      // Se o status for 4xx ou 5xx, o axios joga um erro. N√≥s o capturamos.
      if (error.response?.data) {
        // Se o erro tem uma resposta do backend, retornamos os dados dessa resposta
        // Ex: { success: false, message: 'Email j√° est√° em uso', ... }
        return error.response.data;
      }
      // Se n√£o houver resposta, √© um erro de rede real (servidor offline, etc.)
      return {
        success: false,
        error: 'NETWORK_ERROR',
        message: 'Erro de conex√£o. Tente novamente.',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Logout user (server-side cleanup)
   */
  async logout(): Promise<ApiResponse> {
    return apiService.post('/api/auth/logout');
  }

  /**
   * Refresh access token using refresh token
   */
  async refreshToken(refreshToken: string): Promise<ApiResponse<{ tokens: AuthTokens }>> {
    return apiService.post<{ tokens: AuthTokens }>('/api/auth/refresh', {
      refreshToken,
    });
  }

  /**
   * Get current user profile
   */
  async getProfile(): Promise<ApiResponse<User>> {
    return apiService.get<User>('/api/auth/profile');
  }

  /**
   * Update user profile
   */
  async updateProfile(updates: Partial<User>): Promise<ApiResponse<User>> {
    return apiService.patch<User>('/api/auth/profile', updates);
  }

  // =============================================================================
  // PASSWORD MANAGEMENT
  // =============================================================================

  /**
   * Request password reset email
   */
  async forgotPassword(email: string): Promise<ApiResponse> {
    return apiService.post('/api/auth/forgot-password', { email });
  }

  /**
   * Reset password with token
   */
  async resetPassword(token: string, password: string): Promise<ApiResponse> {
    return apiService.post('/api/auth/reset-password', {
      token,
      password,
    });
  }

  /**
   * Change password (authenticated user)
   */
  async changePassword(
    currentPassword: string,
    newPassword: string
  ): Promise<ApiResponse> {
    return apiService.post('/api/auth/change-password', {
      currentPassword,
      newPassword,
    });
  }

  // =============================================================================
  // EMAIL VERIFICATION
  // =============================================================================

  /**
   * Send email verification
   */
  async sendVerificationEmail(): Promise<ApiResponse> {
    return apiService.post('/api/auth/send-verification');
  }

  /**
   * Verify email with token
   */
  async verifyEmail(token: string): Promise<ApiResponse> {
    return apiService.post('/api/auth/verify-email', { token });
  }

  // =============================================================================
  // ACCOUNT MANAGEMENT
  // =============================================================================

  /**
   * Delete user account
   */
  async deleteAccount(password: string): Promise<ApiResponse> {
    return apiService.delete('/api/auth/account', {
      data: { password },
    });
  }

  /**
   * Check if username is available
   */
  async checkUsernameAvailability(username: string): Promise<ApiResponse<{ available: boolean }>> {
    return apiService.get<{ available: boolean }>(`/api/auth/check-username/${encodeURIComponent(username)}`);
  }

  /**
   * Check if email is available
   */
  async checkEmailAvailability(email: string): Promise<ApiResponse<{ available: boolean }>> {
    return apiService.get<{ available: boolean }>(`/api/auth/check-email/${encodeURIComponent(email)}`);
  }

  // =============================================================================
  // AVATAR MANAGEMENT
  // =============================================================================

  /**
   * Upload user avatar
   */
  async uploadAvatar(
    file: File,
    onProgress?: (progress: number) => void
  ): Promise<ApiResponse<{ avatarUrl: string }>> {
    return apiService.uploadFile<{ avatarUrl: string }>('/api/auth/avatar', file, onProgress);
  }

  /**
   * Remove user avatar
   */
  async removeAvatar(): Promise<ApiResponse> {
    return apiService.delete('/api/auth/avatar');
  }

  // =============================================================================
  // USER STATISTICS
  // =============================================================================

  /**
   * Get user statistics
   */
  async getStatistics(): Promise<ApiResponse<any>> {
    return apiService.get('/api/auth/statistics');
  }

  /**
   * Get user game history
   */
  async getGameHistory(page = 1, limit = 20): Promise<ApiResponse<any>> {
    return apiService.get(`/api/auth/history?page=${page}&limit=${limit}`);
  }

  /**
   * Get user achievements
   */
  async getAchievements(): Promise<ApiResponse<any>> {
    return apiService.get('/api/auth/achievements');
  }

  // =============================================================================
  // SOCIAL FEATURES
  // =============================================================================

  /**
   * Get friends list
   */
  async getFriends(): Promise<ApiResponse<any[]>> {
    return apiService.get('/api/auth/friends');
  }

  /**
   * Send friend request
   */
  async sendFriendRequest(userId: string): Promise<ApiResponse> {
    return apiService.post('/api/auth/friends/request', { userId });
  }

  /**
   * Accept friend request
   */
  async acceptFriendRequest(requestId: string): Promise<ApiResponse> {
    return apiService.post(`/api/auth/friends/accept/${requestId}`);
  }

  /**
   * Reject friend request
   */
  async rejectFriendRequest(requestId: string): Promise<ApiResponse> {
    return apiService.post(`/api/auth/friends/reject/${requestId}`);
  }

  /**
   * Remove friend
   */
  async removeFriend(userId: string): Promise<ApiResponse> {
    return apiService.delete(`/api/auth/friends/${userId}`);
  }

  // =============================================================================
  // PRIVACY SETTINGS
  // =============================================================================

  /**
   * Update privacy settings
   */
  async updatePrivacySettings(settings: Record<string, boolean>): Promise<ApiResponse> {
    return apiService.patch('/api/auth/privacy', settings);
  }

  /**
   * Get privacy settings
   */
  async getPrivacySettings(): Promise<ApiResponse<Record<string, boolean>>> {
    return apiService.get('/api/auth/privacy');
  }

  // =============================================================================
  // NOTIFICATION SETTINGS
  // =============================================================================

  /**
   * Update notification settings
   */
  async updateNotificationSettings(settings: Record<string, boolean>): Promise<ApiResponse> {
    return apiService.patch('/api/auth/notifications', settings);
  }

  /**
   * Get notification settings
   */
  async getNotificationSettings(): Promise<ApiResponse<Record<string, boolean>>> {
    return apiService.get('/api/auth/notifications');
  }

  // =============================================================================
  // SESSION MANAGEMENT
  // =============================================================================

  /**
   * Get active sessions
   */
  async getActiveSessions(): Promise<ApiResponse<any[]>> {
    return apiService.get('/api/auth/sessions');
  }

  /**
   * Revoke session
   */
  async revokeSession(sessionId: string): Promise<ApiResponse> {
    return apiService.delete(`/api/auth/sessions/${sessionId}`);
  }

  /**
   * Revoke all sessions except current
   */
  async revokeAllOtherSessions(): Promise<ApiResponse> {
    return apiService.post('/api/auth/sessions/revoke-all');
  }

  // =============================================================================
  // UTILITY METHODS
  // =============================================================================

  /**
   * Check if user is authenticated (client-side)
   */
  isAuthenticated(): boolean {
    // This will be handled by AuthContext
    return false;
  }

  /**
   * Get current user from context (client-side)
   */
  getCurrentUser(): User | null {
    // This will be handled by AuthContext
    return null;
  }

  /**
   * Validate email format
   */
  validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Validate password strength
   */
  validatePassword(password: string): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    if (password.length < 6) {
      errors.push('Senha deve ter pelo menos 6 caracteres');
    }

    if (!/(?=.*[a-z])/.test(password)) {
      errors.push('Senha deve conter pelo menos uma letra min√∫scula');
    }

    if (!/(?=.*[A-Z])/.test(password)) {
      errors.push('Senha deve conter pelo menos uma letra mai√∫scula');
    }

    if (!/(?=.*\d)/.test(password)) {
      errors.push('Senha deve conter pelo menos um n√∫mero');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }

  /**
   * Validate username format
   */
  validateUsername(username: string): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    if (username.length < 3) {
      errors.push('Username deve ter pelo menos 3 caracteres');
    }

    if (username.length > 20) {
      errors.push('Username deve ter no m√°ximo 20 caracteres');
    }

    if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      errors.push('Username s√≥ pode conter letras, n√∫meros, _ e -');
    }

    // Check for reserved usernames
    const reservedUsernames = [
      'admin', 'moderator', 'system', 'bot', 'werewolf', 'lobisomem',
      'api', 'www', 'mail', 'ftp', 'localhost', 'root'
    ];

    if (reservedUsernames.includes(username.toLowerCase())) {
      errors.push('Este username n√£o est√° dispon√≠vel');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}

// =============================================================================
// EXPORT SINGLETON
// =============================================================================
export const authService = new AuthService();
export default authService;
</file>

<file path="src/styles/globals.css">
/* üê∫ LOBISOMEM ONLINE - Global Styles */
/* Town of Salem inspired design system */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* =============================================================================
   CSS CUSTOM PROPERTIES
   ============================================================================= */
:root {
  /* Medieval color palette */
  --medieval-50: #faf7f4;
  --medieval-100: #f0ebe2;
  --medieval-200: #e0d5c3;
  --medieval-300: #ccb99e;
  --medieval-400: #b59a77;
  --medieval-500: #a6875f;
  --medieval-600: #997353;
  --medieval-700: #7f5d46;
  --medieval-800: #694d3d;
  --medieval-900: #554035;
  --medieval-950: #2d211b;

  /* Salem color palette */
  --salem-50: #faf7f4;
  --salem-100: #f4ede3;
  --salem-200: #e8d9c3;
  --salem-300: #d7c09b;
  --salem-400: #c5a473;
  --salem-500: #b8925a;
  --salem-600: #a67c4a;
  --salem-700: #8a6540;
  --salem-800: #725338;
  --salem-900: #5d4630;
  --salem-950: #312418;

  /* Semantic colors */
  --werewolf: #8B0000;
  --town: #228B22;
  --neutral: #DAA520;

  /* Phase colors */
  --night: #1a1a2e;
  --day: #f4e4bc;
  --voting: #8B0000;

  /* Font families */
  --font-medieval: 'Cinzel', serif;
  --font-game: 'Pirata One', cursive;
  --font-ui: 'Inter', sans-serif;

  /* Shadows */
  --shadow-medieval: 0 4px 20px rgba(0, 0, 0, 0.5);
  --shadow-glow-gold: 0 0 20px rgba(218, 165, 32, 0.6);
  --shadow-glow-red: 0 0 20px rgba(139, 0, 0, 0.6);
  --shadow-glow-green: 0 0 20px rgba(34, 139, 34, 0.6);

  /* Animations */
  --transition-default: all 0.2s ease-in-out;
  --transition-slow: all 0.3s ease-in-out;
}

/* =============================================================================
   BASE STYLES
   ============================================================================= */
* {
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-ui);
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

/* Remove default margins and paddings */
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
li,
blockquote,
figure {
  margin: 0;
  padding: 0;
}

/* Images */
img {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Links */
a {
  color: inherit;
  text-decoration: none;
}

/* Focus styles */
:focus {
  outline: 2px solid var(--salem-400);
  outline-offset: 2px;
}

/* Disable focus outline for mouse users */
body:not(.using-keyboard) *:focus {
  outline: none;
}

/* =============================================================================
   CUSTOM SCROLLBAR
   ============================================================================= */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(45, 27, 30, 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: rgba(139, 146, 90, 0.5);
  border-radius: 4px;
  transition: var(--transition-default);
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(139, 146, 90, 0.8);
}

::-webkit-scrollbar-corner {
  background: transparent;
}

/* Firefox scrollbar */
* {
  scrollbar-width: thin;
  scrollbar-color: rgba(139, 146, 90, 0.5) rgba(45, 27, 30, 0.1);
}

/* =============================================================================
   TYPOGRAPHY
   ============================================================================= */
.font-medieval {
  font-family: var(--font-medieval);
}

.font-game {
  font-family: var(--font-game);
}

.font-ui {
  font-family: var(--font-ui);
}

/* Text glow effect */
.text-glow {
  text-shadow: 0 0 10px rgba(218, 165, 32, 0.8);
}

.text-glow-red {
  text-shadow: 0 0 10px rgba(139, 0, 0, 0.8);
}

.text-glow-green {
  text-shadow: 0 0 10px rgba(34, 139, 34, 0.8);
}

.text-glow-blue {
  text-shadow: 0 0 10px rgba(30, 144, 255, 0.8);
}

/* =============================================================================
   COMPONENT UTILITIES
   ============================================================================= */

/* Medieval themed components */
.btn-medieval {
  @apply px-6 py-3 bg-gradient-to-b from-amber-600 to-amber-800 text-white font-medieval text-lg border-3 border-amber-400 rounded-lg hover:from-amber-500 hover:to-amber-700 transition-all duration-200 shadow-medieval relative overflow-hidden;
}

.btn-medieval:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-glow-gold);
}

.btn-medieval::before {
  content: '';
  @apply absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20 translate-x-[-100%] transition-transform duration-1000;
}

.btn-medieval:hover::before {
  transform: translateX(100%);
}

.card-medieval {
  @apply bg-gradient-to-b from-medieval-700 to-medieval-900 border-3 border-amber-600 rounded-lg shadow-glow-gold backdrop-blur-sm relative overflow-hidden;
}

.card-medieval::before {
  content: '';
  @apply absolute inset-0 bg-medieval-paper bg-cover bg-center opacity-10;
}

/* Phase-specific styles */
.phase-night {
  @apply bg-gradient-to-b from-night-light to-night-dark text-white;
}

.phase-day {
  @apply bg-gradient-to-b from-day-light to-day-dark text-medieval-900;
}

.phase-voting {
  @apply bg-gradient-to-b from-voting-dark to-voting-light text-white;
}

/* =============================================================================
   ANIMATIONS
   ============================================================================= */

/* Fade in animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

/* Slide animations */
@keyframes slideUp {
  from {
    transform: translateY(100%);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideDown {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}

.animate-slide-down {
  animation: slideDown 0.3s ease-out;
}

/* Float animation */
@keyframes float {

  0%,
  100% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-10px);
  }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

/* Glow animation */
@keyframes glow {
  0% {
    box-shadow: 0 0 5px rgba(218, 165, 32, 0.5);
  }

  100% {
    box-shadow: 0 0 20px rgba(218, 165, 32, 0.8);
  }
}

.animate-glow {
  animation: glow 2s ease-in-out infinite alternate;
}

/* Death animation */
@keyframes death {
  0% {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }

  50% {
    opacity: 0.5;
    transform: scale(1.1) rotate(5deg);
  }

  100% {
    opacity: 0.3;
    transform: scale(0.9) rotate(-5deg);
  }
}

.animate-death {
  animation: death 1s ease-in-out forwards;
}

/* Heartbeat animation */
@keyframes heartbeat {

  0%,
  100% {
    transform: scale(1);
  }

  50% {
    transform: scale(1.05);
  }
}

.animate-heartbeat {
  animation: heartbeat 1.5s ease-in-out infinite;
}

/* =============================================================================
   UTILITY CLASSES
   ============================================================================= */

/* Glass morphism effect */
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.glass-dark {
  background: rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Noise texture overlay */
.noise-overlay::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.1'/%3E%3C/svg%3E");
  pointer-events: none;
}

/* Hidden scrollbar but still scrollable */
.scrollbar-hidden {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-hidden::-webkit-scrollbar {
  display: none;
}

/* Disable text selection */
.no-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Enable text selection */
.select-text {
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
}

/* =============================================================================
   RESPONSIVE DESIGN
   ============================================================================= */

/* Mobile-first approach adjustments */
@media (max-width: 640px) {
  .btn-medieval {
    @apply text-base px-4 py-2;
  }

  .card-medieval {
    @apply border-2;
  }
}

/* =============================================================================
   ACCESSIBILITY
   ============================================================================= */

/* Reduced motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {

  .text-glow,
  .text-glow-red,
  .text-glow-green,
  .text-glow-blue {
    text-shadow: none;
  }

  .btn-medieval {
    border-width: 3px;
  }
}

/* =============================================================================
   DARK MODE ADJUSTMENTS
   ============================================================================= */
.dark {
  color-scheme: dark;
}

.dark .glass {
  background: rgba(0, 0, 0, 0.3);
}

/* =============================================================================
   PRINT STYLES
   ============================================================================= */
@media print {
  .no-print {
    display: none !important;
  }

  * {
    background: white !important;
    color: black !important;
    text-shadow: none !important;
    box-shadow: none !important;
  }
}
</file>

<file path="src/types/index.ts">
// üê∫ LOBISOMEM ONLINE - Frontend Types
// Baseado no Town of Salem

// =============================================================================
// ‚úÖ USER & AUTHENTICATION - TIPOS COMPLETOS
// =============================================================================
export interface User {
  id: string;
  username: string;
  email: string;
  avatar?: string;
  level: number;
  totalGames: number;
  totalWins: number;
  totalLosses: number;
  winRate: number;
  createdAt: string;
  updatedAt?: string;
  lastLoginAt?: string;

  // ‚úÖ ADICIONADO: Campos extras para o perfil
  bio?: string;
  country?: string;
  preferredLanguage?: string;
  timezone?: string;
  isVerified?: boolean;
  isBanned?: boolean;
  banReason?: string;
  banExpiresAt?: string;
}

export interface AuthTokens {
  accessToken: string;
  refreshToken?: string;
  expiresIn?: number;
  tokenType?: string;
}

export interface LoginRequest {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterRequest {
  email: string;
  username: string;
  password: string;
  confirmPassword: string;
  acceptTerms?: boolean;
  newsletter?: boolean;
}

// ‚úÖ CORRIGIDO: AuthResponse com estrutura consistente
export interface AuthResponse {
  success: boolean;
  data?: {
    user: User;
    tokens: AuthTokens;
  };
  error?: string;
  message?: string;
  timestamp: string;
}

// ‚úÖ ADICIONADO: Tipos para verifica√ß√£o de disponibilidade
export interface AvailabilityCheckResponse {
  success: boolean;
  data?: {
    available: boolean;
    suggestions?: string[];
  };
  error?: string;
}

// ‚úÖ ADICIONADO: Tipos para reset de senha
export interface ForgotPasswordRequest {
  email: string;
}

export interface ResetPasswordRequest {
  token: string;
  password: string;
  confirmPassword: string;
}

// =============================================================================
// GAME TYPES
// =============================================================================
export enum GamePhase {
  LOBBY = 'LOBBY',
  NIGHT = 'NIGHT',
  DAY = 'DAY',
  VOTING = 'VOTING',
  ENDED = 'ENDED',
}

export enum Role {
  VILLAGER = 'VILLAGER',
  SHERIFF = 'SHERIFF',
  DOCTOR = 'DOCTOR',
  VIGILANTE = 'VIGILANTE',
  WEREWOLF = 'WEREWOLF',
  WEREWOLF_KING = 'WEREWOLF_KING',
  JESTER = 'JESTER',
  SERIAL_KILLER = 'SERIAL_KILLER',
}

export enum Faction {
  TOWN = 'TOWN',
  WEREWOLF = 'WEREWOLF',
  NEUTRAL = 'NEUTRAL',
}

export interface Player {
  id: string;
  userId: string;
  username: string;
  nickname?: string;
  avatar?: string;
  role?: Role;
  faction?: Faction;
  isAlive: boolean;
  isHost: boolean;
  isReady: boolean;
  isSpectator: boolean;
  isConnected: boolean;
  votedFor?: string;
  votesReceived: number;
  hasActed: boolean;
  houseNumber?: number; // Para Town of Salem visual

  // ‚úÖ ADICIONADO: Campos extras para gameplay
  isProtected?: boolean;
  isJailed?: boolean;
  lastWill?: string;
  deathNote?: string;
  killedBy?: string;
  diedAt?: string;
}

export interface GameState {
  gameId: string;
  roomId: string;
  phase: GamePhase;
  timeLeft: number;
  currentDay: number;
  players: Player[];
  spectators: Player[];
  events: GameEvent[];
  yourRole?: Role;
  yourFaction?: Faction;
  winners?: {
    faction: Faction;
    players: string[];
  };

  // ‚úÖ ADICIONADO: Estado adicional do jogo
  phaseHistory: GamePhase[];
  eliminatedPlayers: Player[];
  nightActions: NightAction[];
  votingResults: VotingResult[];
}

export interface GameEvent {
  id: string;
  type: string;
  message: string;
  timestamp: string;
  visible: boolean;
  phase: GamePhase;
  day: number;

  // ‚úÖ ADICIONADO: Contexto adicional
  playerId?: string;
  targetId?: string;
  metadata?: Record<string, any>;
}

// ‚úÖ ADICIONADO: Tipos para a√ß√µes noturnas
export interface NightAction {
  id: string;
  playerId: string;
  targetId?: string;
  action: string;
  timestamp: string;
  successful: boolean;
  blocked?: boolean;
  reason?: string;
}

// =============================================================================
// ROOM TYPES
// =============================================================================
export interface Room {
  id: string;
  name: string;
  code?: string;
  isPrivate: boolean;
  maxPlayers: number;
  maxSpectators: number;
  currentPlayers: number;
  currentSpectators: number;
  status: 'WAITING' | 'PLAYING' | 'FINISHED';
  hostId: string;
  hostUsername: string;
  canJoin: boolean;
  createdAt: string;
  updatedAt?: string;

  // ‚úÖ ADICIONADO: Configura√ß√µes da sala
  settings: RoomSettings;
}

// ‚úÖ ADICIONADO: Configura√ß√µes detalhadas da sala
export interface RoomSettings {
  gameMode: 'CLASSIC' | 'RANKED' | 'CUSTOM';
  timeDay: number; // segundos
  timeNight: number; // segundos
  timeVoting: number; // segundos
  allowSpectators: boolean;
  autoStart: boolean;
  customRoles?: Role[];
  bannedPlayers?: string[];
}

export interface CreateRoomRequest {
  name: string;
  isPrivate?: boolean;
  maxPlayers?: number;
  maxSpectators?: number;
  settings?: Partial<RoomSettings>;
}

// =============================================================================
// ‚úÖ WEBSOCKET TYPES - MELHORADOS
// =============================================================================
export interface WebSocketMessage {
  type: string;
  data?: any;
  timestamp?: string;
  messageId?: string;
  roomId?: string;
  userId?: string;
}

export interface ChatMessage {
  id: string;
  userId: string;
  username: string;
  message: string;
  channel: 'public' | 'werewolf' | 'spectator' | 'system' | 'dead';
  timestamp: string;
  filtered?: boolean;

  // ‚úÖ ADICIONADO: Metadata para chat
  isWhisper?: boolean;
  targetUserId?: string;
  edited?: boolean;
  editedAt?: string;
}

export enum SocketEvent {
  // Connection
  CONNECT = 'connect',
  DISCONNECT = 'disconnect',
  ERROR = 'error',
  AUTH = 'auth',

  // Room events
  JOIN_ROOM = 'join-room',
  LEAVE_ROOM = 'leave-room',
  PLAYER_READY = 'player-ready',
  START_GAME = 'start-game',
  ROOM_UPDATED = 'room-updated',

  // Game events
  GAME_STATE = 'game-state',
  PHASE_CHANGE = 'phase-change',
  GAME_ACTION = 'game-action',
  VOTE = 'vote',
  NIGHT_ACTION = 'night-action',

  // Chat events
  CHAT_MESSAGE = 'chat-message',
  WHISPER = 'whisper',

  // System events
  PLAYER_JOINED = 'player-joined',
  PLAYER_LEFT = 'player-left',
  PLAYER_DISCONNECTED = 'player-disconnected',
  PLAYER_RECONNECTED = 'player-reconnected',
  GAME_STARTED = 'game-started',
  GAME_ENDED = 'game-ended',
  PLAYER_ELIMINATED = 'player-eliminated',
  SYSTEM_MESSAGE = 'system-message',
}

// =============================================================================
// VOTING TYPES
// =============================================================================
export interface Vote {
  voterId: string;
  targetId: string;
  timestamp: string;
  weight?: number; // Para roles especiais
}

export interface VotingResult {
  eliminated?: {
    playerId: string;
    username: string;
    role: Role;
    voteCount: number;
  };
  votes: VoteCount[];
  isTie: boolean;
  abstentions: number;
  totalVoters: number;
}

export interface VoteCount {
  playerId: string;
  username: string;
  votes: number;
  voters: string[];
  percentage: number;
}

// =============================================================================
// ‚úÖ UI TYPES - EXPANDIDOS
// =============================================================================
export interface ThemeConfig {
  isDark: boolean;
  currentPhase: GamePhase;
  soundEnabled: boolean;
  musicVolume: number;
  sfxVolume: number;

  // ‚úÖ ADICIONADO: Configura√ß√µes visuais
  animationsEnabled: boolean;
  highContrast: boolean;
  fontSize: 'small' | 'medium' | 'large';
  colorBlindMode: boolean;
}

export interface NotificationConfig {
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message: string;
  duration?: number;
  persistent?: boolean;
  action?: {
    label: string;
    onClick: () => void;
  };

  // ‚úÖ ADICIONADO: Notifica√ß√£o avan√ßada
  sound?: boolean;
  icon?: string;
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
}

// =============================================================================
// ‚úÖ API RESPONSE TYPES - MELHORADOS
// =============================================================================
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
  timestamp: string;
  statusCode?: number;

  // ‚úÖ ADICIONADO: Metadata da resposta
  requestId?: string;
  version?: string;
  cached?: boolean;
}

export interface PaginatedResponse<T> {
  items: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };

  // ‚úÖ ADICIONADO: Filtros aplicados
  filters?: Record<string, any>;
  sort?: {
    field: string;
    direction: 'asc' | 'desc';
  };
}

// =============================================================================
// LEADERBOARD TYPES
// =============================================================================
export interface LeaderboardEntry {
  rank: number;
  user: {
    id: string;
    username: string;
    avatar?: string;
    level: number;
    country?: string;
  };
  points: number;
  totalGames: number;
  winRate: number;
  favoriteRole?: Role;

  // ‚úÖ ADICIONADO: Estat√≠sticas extras
  currentStreak: number;
  longestStreak: number;
  lastGameAt?: string;
}

// =============================================================================
// ‚úÖ STATISTICS TYPES - EXPANDIDOS
// =============================================================================
export interface UserStatistics {
  totalGames: number;
  totalWins: number;
  totalLosses: number;
  winRate: number;
  level: number;
  favoriteRole?: Role;
  longestWinStreak: number;
  currentStreak: number;
  roleStats: RoleStatistics[];
  recentGames: GameSummary[];

  // ‚úÖ ADICIONADO: Estat√≠sticas avan√ßadas
  averageGameDuration: number;
  survivalRate: number;
  eliminationRate: number;
  mvpCount: number;
  perfectGames: number;
  comebackWins: number;
}

export interface RoleStatistics {
  role: Role;
  gamesPlayed: number;
  wins: number;
  winRate: number;

  // ‚úÖ ADICIONADO: Stats espec√≠ficos por role
  averageSurvivalTime: number;
  successfulActions: number;
  totalActions: number;
  mvpCount: number;
}

export interface GameSummary {
  gameId: string;
  role: Role;
  faction: Faction;
  won: boolean;
  survived: boolean;
  playedAt: string;
  duration: number;

  // ‚úÖ ADICIONADO: Detalhes do jogo
  totalPlayers: number;
  daysSurvived: number;
  actionsPerformed: number;
  mvp: boolean;
  eliminatedBy?: string;
  finalPosition: number;
}

// =============================================================================
// ‚úÖ COMPONENT PROP TYPES - MELHORADOS
// =============================================================================
export interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'danger' | 'medieval' | 'ghost' | 'outline';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  disabled?: boolean;
  loading?: boolean;
  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
  className?: string;
  type?: 'button' | 'submit' | 'reset';

  // ‚úÖ ADICIONADO: Props extras
  fullWidth?: boolean;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
  tooltip?: string;
  ariaLabel?: string;
}

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  className?: string;
  closeOnOverlayClick?: boolean;

  // ‚úÖ ADICIONADO: Props extras
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  variant?: 'default' | 'medieval' | 'dark';
  showCloseButton?: boolean;
  preventScroll?: boolean;
  zIndex?: number;
}

// =============================================================================
// ‚úÖ FORM TYPES - EXPANDIDOS
// =============================================================================
export interface FormError {
  field: string;
  message: string;
  code?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: FormError[];
  warnings?: FormError[];
}

// ‚úÖ ADICIONADO: Tipos para formul√°rios complexos
export interface FormField<T = any> {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'checkbox' | 'radio' | 'textarea';
  value: T;
  required?: boolean;
  disabled?: boolean;
  placeholder?: string;
  options?: Array<{ label: string; value: any }>;
  validation?: (value: T) => ValidationResult;
}

export interface FormState<T = Record<string, any>> {
  values: T;
  errors: Record<keyof T, string>;
  touched: Record<keyof T, boolean>;
  isSubmitting: boolean;
  isValid: boolean;
}

// =============================================================================
// ‚úÖ AUDIO TYPES - EXPANDIDOS
// =============================================================================
export interface AudioConfig {
  musicVolume: number;
  sfxVolume: number;
  enabled: boolean;

  // ‚úÖ ADICIONADO: Configura√ß√µes avan√ßadas
  muteOnBackground: boolean;
  spatialAudio: boolean;
  audioQuality: 'low' | 'medium' | 'high';
}

export interface SoundEffect {
  id: string;
  url: string;
  volume?: number;
  loop?: boolean;

  // ‚úÖ ADICIONADO: Propriedades extras
  preload?: boolean;
  category: 'ui' | 'game' | 'ambient' | 'voice';
  duration?: number;
  fadeIn?: number;
  fadeOut?: number;
}

export interface MusicTrack {
  id: string;
  name: string;
  url: string;
  loop: boolean;
  volume: number;

  // ‚úÖ ADICIONADO: Metadata da m√∫sica
  artist?: string;
  duration?: number;
  genre?: string;
  mood?: 'calm' | 'tense' | 'action' | 'victory' | 'defeat';
}

// =============================================================================
// ‚úÖ ACCESSIBILITY TYPES
// =============================================================================
export interface AccessibilityConfig {
  reduceMotion: boolean;
  highContrast: boolean;
  largeText: boolean;
  screenReader: boolean;
  keyboardNavigation: boolean;
  colorBlindFriendly: boolean;
}

// =============================================================================
// ‚úÖ PERFORMANCE TYPES
// =============================================================================
export interface PerformanceMetrics {
  fps: number;
  memoryUsage: number;
  networkLatency: number;
  renderTime: number;
  jsHeapSize: number;
}

// =============================================================================
// ‚úÖ ERROR HANDLING TYPES
// =============================================================================
export interface ErrorInfo {
  message: string;
  stack?: string;
  code?: string | number;
  timestamp: string;
  userId?: string;
  context?: Record<string, any>;
}

export interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
}

// =============================================================================
// ‚úÖ LOCALIZATION TYPES
// =============================================================================
export interface LocaleConfig {
  language: string;
  region: string;
  dateFormat: string;
  timeFormat: string;
  numberFormat: string;
  currency: string;
}

export interface TranslationKey {
  key: string;
  defaultValue: string;
  interpolation?: Record<string, any>;
}

// =============================================================================
// ‚úÖ ANALYTICS TYPES
// =============================================================================
export interface AnalyticsEvent {
  event: string;
  category: string;
  action: string;
  label?: string;
  value?: number;
  customData?: Record<string, any>;
  timestamp: string;
}

export interface UserSession {
  sessionId: string;
  userId?: string;
  startTime: string;
  endTime?: string;
  pageViews: number;
  events: AnalyticsEvent[];
  device: {
    type: 'desktop' | 'mobile' | 'tablet';
    os: string;
    browser: string;
  };
}

// =============================================================================
// ‚úÖ SECURITY TYPES
// =============================================================================
export interface SecurityConfig {
  rateLimit: {
    requests: number;
    window: number; // milliseconds
  };
  csrf: {
    enabled: boolean;
    tokenName: string;
  };
  encryption: {
    algorithm: string;
    keyLength: number;
  };
}

export interface Permission {
  id: string;
  name: string;
  description: string;
  category: string;
}

export interface Role {
  id: string;
  name: string;
  permissions: Permission[];
  isAdmin: boolean;
}

// =============================================================================
// ‚úÖ FILE HANDLING TYPES
// =============================================================================
export interface FileUpload {
  file: File;
  progress: number;
  status: 'pending' | 'uploading' | 'completed' | 'error';
  error?: string;
  url?: string;
}

export interface FileConfig {
  maxSize: number; // bytes
  allowedTypes: string[];
  allowedExtensions: string[];
  compressionEnabled: boolean;
  compressionQuality: number;
}

// =============================================================================
// ‚úÖ CACHE TYPES
// =============================================================================
export interface CacheConfig {
  ttl: number; // time to live in milliseconds
  maxSize: number; // maximum items in cache
  strategy: 'lru' | 'fifo' | 'lfu';
}

export interface CacheItem<T = any> {
  key: string;
  value: T;
  timestamp: number;
  ttl: number;
  hits: number;
}

// =============================================================================
// ‚úÖ WEBHOOK TYPES
// =============================================================================
export interface WebhookEvent {
  id: string;
  type: string;
  data: any;
  timestamp: string;
  signature?: string;
  retryCount: number;
}

export interface WebhookConfig {
  url: string;
  secret: string;
  events: string[];
  active: boolean;
  retryAttempts: number;
  retryDelay: number;
}

// =============================================================================
// ‚úÖ UTILITY TYPES
// =============================================================================
export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export type DeepRequired<T> = {
  [P in keyof T]-?: T[P] extends object ? DeepRequired<T[P]> : T[P];
};

// =============================================================================
// ‚úÖ BRAND TYPES FOR TYPE SAFETY
// =============================================================================
export type UserId = string & { readonly __brand: unique symbol };
export type RoomId = string & { readonly __brand: unique symbol };
export type GameId = string & { readonly __brand: unique symbol };
export type SessionId = string & { readonly __brand: unique symbol };
export type TokenId = string & { readonly __brand: unique symbol };

// =============================================================================
// ‚úÖ ENVIRONMENT TYPES
// =============================================================================
export interface EnvironmentConfig {
  NODE_ENV: 'development' | 'production' | 'test';
  API_URL: string;
  WS_URL: string;
  VERSION: string;
  BUILD_TIME: string;
  SENTRY_DSN?: string;
  ANALYTICS_ID?: string;
}

// =============================================================================
// ‚úÖ FEATURE FLAGS
// =============================================================================
export interface FeatureFlags {
  enableNewLobby: boolean;
  enableVoiceChat: boolean;
  enableRankedMode: boolean;
  enableCustomRoles: boolean;
  enableSpectatorMode: boolean;
  enableReplaySystem: boolean;
  enableAchievements: boolean;
  enableDarkMode: boolean;
  enableBetaFeatures: boolean;
}

// =============================================================================
// ‚úÖ EXPORT HELPERS
// =============================================================================

// Type guards
export function isUser(obj: any): obj is User {
  return obj && typeof obj.id === 'string' && typeof obj.username === 'string';
}

export function isApiResponse<T>(obj: any): obj is ApiResponse<T> {
  return obj && typeof obj.success === 'boolean' && typeof obj.timestamp === 'string';
}

export function isWebSocketMessage(obj: any): obj is WebSocketMessage {
  return obj && typeof obj.type === 'string';
}

// Utility functions for types
export function createUserId(id: string): UserId {
  return id as UserId;
}

export function createRoomId(id: string): RoomId {
  return id as RoomId;
}

export function createGameId(id: string): GameId {
  return id as GameId;
}

// Default values
export const DEFAULT_USER_STATS: UserStatistics = {
  totalGames: 0,
  totalWins: 0,
  totalLosses: 0,
  winRate: 0,
  level: 1,
  longestWinStreak: 0,
  currentStreak: 0,
  roleStats: [],
  recentGames: [],
  averageGameDuration: 0,
  survivalRate: 0,
  eliminationRate: 0,
  mvpCount: 0,
  perfectGames: 0,
  comebackWins: 0,
};

export const DEFAULT_THEME_CONFIG: ThemeConfig = {
  isDark: true,
  currentPhase: GamePhase.LOBBY,
  soundEnabled: true,
  musicVolume: 0.7,
  sfxVolume: 0.8,
  animationsEnabled: true,
  highContrast: false,
  fontSize: 'medium',
  colorBlindMode: false,
};

export const DEFAULT_AUDIO_CONFIG: AudioConfig = {
  musicVolume: 0.7,
  sfxVolume: 0.8,
  enabled: true,
  muteOnBackground: true,
  spatialAudio: false,
  audioQuality: 'medium',
};

export const DEFAULT_ACCESSIBILITY_CONFIG: AccessibilityConfig = {
  reduceMotion: false,
  highContrast: false,
  largeText: false,
  screenReader: false,
  keyboardNavigation: true,
  colorBlindFriendly: false,
};

export interface RoomSettings {
  gameMode: 'CLASSIC' | 'RANKED' | 'CUSTOM';
  timeDay: number; // segundos
  timeNight: number; // segundos
  timeVoting: number; // segundos
  allowSpectators: boolean;
  autoStart: boolean;
  customRoles?: Role[];
  bannedPlayers?: string[];
}

// Atualizar interface Room existente para incluir settings:
export interface Room {
  id: string;
  name: string;
  code?: string;
  isPrivate: boolean;
  maxPlayers: number;
  maxSpectators: number;
  currentPlayers: number;
  currentSpectators: number;
  status: 'WAITING' | 'PLAYING' | 'FINISHED';
  hostId: string;
  hostUsername: string;
  canJoin: boolean;
  createdAt: string;
  updatedAt?: string;
  settings: RoomSettings; // ‚úÖ NOVO CAMPO
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@/components/*": [
        "./src/components/*"
      ],
      "@/pages/*": [
        "./src/pages/*"
      ],
      "@/hooks/*": [
        "./src/hooks/*"
      ],
      "@/context/*": [
        "./src/context/*"
      ],
      "@/services/*": [
        "./src/services/*"
      ],
      "@/types/*": [
        "./src/types/*"
      ],
      "@/utils/*": [
        "./src/utils/*"
      ],
      "@/styles/*": [
        "./src/styles/*"
      ],
      "@/public/*": [
        "./public/*"
      ]
    },
    "forceConsistentCasingInFileNames": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

</files>
