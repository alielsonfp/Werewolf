generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  passwordHash String    @map("password_hash")
  avatar       String?
  level        Int       @default(1)
  totalGames   Int       @default(0) @map("total_games")
  totalWins    Int       @default(0) @map("total_wins")
  totalLosses  Int       @default(0) @map("total_losses")
  winRate      Float     @default(0.0) @map("win_rate")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastLoginAt  DateTime? @map("last_login_at")

  hostedRooms      Room[]            @relation("RoomHost")
  gameResults      GameResult[]
  userAchievements UserAchievement[]
  chatMessages     ChatMessage[]

  @@index([email])
  @@index([username])
  @@index([totalGames])
  @@index([winRate])
  @@map("users")
}

model Room {
  id            String     @id @default(cuid())
  name          String
  code          String?    @unique
  isPrivate     Boolean    @default(false) @map("is_private")
  maxPlayers    Int        @default(15) @map("max_players")
  maxSpectators Int        @default(5) @map("max_spectators")
  status        RoomStatus @default(WAITING)
  hostId        String     @map("host_id")
  host          User       @relation("RoomHost", fields: [hostId], references: [id], onDelete: Cascade)
  serverId      String?    @map("server_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  games        Game[]
  chatMessages ChatMessage[]

  @@index([status])
  @@index([isPrivate])
  @@index([code])
  @@index([hostId])
  @@index([createdAt])
  @@map("rooms")
}

enum RoomStatus {
  WAITING
  PLAYING
  FINISHED
}

model Game {
  id              String      @id @default(cuid())
  roomId          String      @map("room_id")
  status          GameStatus  @default(WAITING)
  phase           GamePhase   @default(LOBBY)
  currentDay      Int         @default(1) @map("current_day")
  config          Json
  winningFaction  String?     @map("winning_faction")
  winningPlayers  String[]    @map("winning_players")
  createdAt       DateTime    @default(now()) @map("created_at")
  startedAt       DateTime?   @map("started_at")
  finishedAt      DateTime?   @map("finished_at")

  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  gameResults  GameResult[]
  gameEvents   GameEvent[]

  @@index([status])
  @@index([roomId])
  @@index([createdAt])
  @@map("games")
}

enum GameStatus {
  WAITING
  STARTING
  PLAYING
  FINISHED
  CANCELLED
}

enum GamePhase {
  LOBBY
  NIGHT
  DAY
  VOTING
  ENDED
}

model GameResult {
  id          String   @id @default(cuid())
  gameId      String   @map("game_id")
  userId      String   @map("user_id")
  role        String
  faction     String
  won         Boolean  @default(false)
  survived    Boolean  @default(false)
  duration    Int
  playerCount Int      @map("player_count")
  playedAt    DateTime @default(now()) @map("played_at")

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
  @@index([userId])
  @@index([playedAt])
  @@index([won])
  @@index([role])
  @@map("game_results")
}

model GameEvent {
  id        String    @id @default(cuid())
  gameId    String    @map("game_id")
  type      String
  phase     GamePhase
  day       Int
  data      Json
  visible   Boolean   @default(true)
  timestamp DateTime  @default(now())

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_events")
}

model Achievement {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String
  icon        String?
  category    String
  points      Int      @default(0)
  conditions  Json
  createdAt   DateTime @default(now()) @map("created_at")

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  achievementId String    @map("achievement_id")
  progress      Json      @default("{}")
  completed     Boolean   @default(false)
  unlockedAt    DateTime? @map("unlocked_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([completed])
  @@index([unlockedAt])
  @@map("user_achievements")
}

model ChatMessage {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  roomId    String?     @map("room_id")
  channel   ChatChannel @default(PUBLIC)
  message   String
  filtered  Boolean     @default(false)
  createdAt DateTime    @default(now()) @map("created_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([channel])
  @@index([createdAt])
  @@map("chat_messages")
}

enum ChatChannel {
  LOBBY
  ROOM
  PUBLIC
  WEREWOLF
  SPECTATOR
  SYSTEM
}